.TH DB2SQL 3 "$Date: 2007/08/23 16:24:12 $"
.SH NAME
dbschema2sqlcreate, db2sqlinsert, db2sqldelete, db2sql_set_syncfield_name \- routines to create SQL commands from Datascope databases
.SH SYNOPSIS
.nf
#include "db2sql.h"

Tbl *dbschema2sqlcreate( Dbptr db, long flags );

long db2sqlinsert( Dbptr db, Tbl **tbl, char *(*createsync)(Dbptr db), long flags );

int db2sqldelete( Dbptr db, char *sync, Tbl **tbl, long flags );

char *db2sql_set_syncfield_name( void );

void db2sql_set_syncfield_name( char *name );

.fi
.SH DESCRIPTION
These routines create Structured Query Language (SQL) representations of Datascope databases 
and schemata. \fBdbschema2sqlcreate\fP maps a database schema from Datascope to SQL. 
\fBdb2sqlinsert\fP maps individual database rows from Datascope to SQL. 

The \fBdbschema2sqlcreate\fP function converts the schema for the input database
into a Tbl (see tbl(3)) of string values containing SQL create statements. 

Currently, the only supported value for \fIflags\fP given to \fBdbschema2sqlcreate\fP is \fIDB2SQL_OMIT_SYNC\fP.
Unless the \fIDB2SQL_OMIT_SYNC\fP flag 
is given, an extra database field is appended by \fBdbschema2sqlcreate\fP with the 
value of the macro \fIDB2SQL_SYNCFIELD_NAME_DEFAULT\fP, currently set to \fIsyncstring\fP in db2sql.h and 
with the corresponding SQL schema format given by the macro \fIDB2SQL_SYNCFIELD_SPEC\fP as 
.nf

        CHAR(40) DEFAULT '-'

.fi
This syncronization field is used to hold values of a synchronization string computed by the 
\fBdb2sqlinsert\fP function for updating changes made to the database. The default name of the 
synchronization string may be changed with the \fBdb2sql_set_syncfield_name\fP function 
described below. 

The table returned by \fBdbschema2sqlcreate\fP is newly allocated, along with all string 
fields it contains as entries, and must therefore be freed by the caller after use with a 
command like
.nf

        freetbl( tbl, free );
.fi

The \fBdb2sqlinsert\fP function generates SQL insert commands for each row in the 
specified database pointer. 

Currently, the only supported values for \fIflags\fP given to \fBdb2sqlinsert\fP are \fIDB2SQL_OMIT_SYNC\fP and 
\fIDB2SQL_USE_DATASCOPE_NULLS\fP. 

Unless the \fIDB2SQL_OMIT_SYNC\fP flag 
is used, an extra database field is computed and inserted by \fBdb2sqlinsert\fP, containing
a synchronization string that uniquely labels the contents of the input database row. The construction 
of the synchronization string for each database row is performed by the \fIcreatesync\fP function
passed to \fBdb2sqlinsert\fP.  This synchronization string can 
be used in later operations to alter or delete SQL-database rows when their corresponding Datascope database
rows change. The createsync function should be of the form
.nf

        char *\fIcreatesync\fP( Dbptr \fIdb\fP )

.fi
This function should return a newly allocated pointer to the synchronization string for the database 
row pointed to by the input database-pointer \fIdb\fP, or a null string in the case of error. The
\fBdb2sqlinsert\fP function will free this returned pointer if it is non-null. 

Unless the flag \fIDB2SQL_USE_DATASCOPE_NULLS\fP is given, \fBdb2sqlinsert\fP converts all Datascope 
null values into official SQL \fINULL\fP values. With the \fIDB2SQL_USE_DATASCOPE_NULLS\fP flag
set, Datascope Null values are inserted into the SQL tables verbatim. 

String entries added to the given table by \fBdb2sqlinsert\fP are newly allocated, and must be 
freed by the caller when no longer needed. Similarly, if the \fItbl\fP pointer given to 
\fBdb2sqlinsert\fP is NULL, \fBdb2sqlinsert\fP allocates a new table for the return results, which 
must be freed after use with a command like 
.nf

	freetbl( tbl, free );
.fi

The \fBdb2sqldelete\fP function creates a SQL delete statement for a row in the table pointed to 
by the input database pointer and described by the syncronization string given in the \fIsync\fP 
argument. The SQL command is added to the input tbl, which, as in the other functions in this library, 
is created if null and must be destroyed by the caller. 

The \fBdb2sql_get_syncfield_name\fP returns the current name of the synchronization field for the SQL 
database. This is returned as a newly allocated character string which must be freed by the caller. 

The \fBdb2sql_set_syncfield_name\fP function allows the user to specify the name of the synchronization 
field name in the SQL database, which defaults to \fIsyncstring\fP. 
.SH EXAMPLE
.in 2c
.ft CW
.nf

#include <stdlib.h>
#include "db.h"
#include "stock.h"
#include "dbmon.h"
#include "db2sql.h"

void newrow( Dbptr db, char *table, long irecord, char *sync, void *private );
void delrow( Dbptr db, char *table, char *sync, void *private );

void
newrow( Dbptr db, char *table, long irecord, char *sync, void *private )
{ 
	Tbl	**sql = (Tbl **) private;

	db2sqlinsert( db, sql, dbmon_compute_row_sync, 0L );

	return;
}

void
delrow( Dbptr db, char *table, char *sync, void *private )
{ 
	Tbl	**sql = (Tbl **) private;
	char	*sqlcmd;

	allot( char *, sqlcmd, STRSZ );

	sprintf( sqlcmd, "DELETE from `%s` WHERE %s = '%s';\\n", 
			table, DB2SQL_SYNCFIELD_NAME, sync );

	pushtbl( *sql, sqlcmd );

	return;
}

int
main(int argc, char **argv )
{
	Dbptr	db;
	char	*dbname = "./testdb/demo";
	Hook	*dbmon_hook = NULL;
	Tbl	*tables; 
	Tbl	*sql = NULL;

	if( argc > 1 ) {

		tables = strtbl( "sensor", 0 );

	} else {
		
		tables = (Tbl *) NULL;
	}

	dbopen_database( dbname, "r", &db );

	dbmon_hook = dbmon_init( db, tables, newrow, delrow, 0 );

	dbmon_update( dbmon_hook, (void *) &sql );

	dbmon_status( stdout, dbmon_hook );

	debugtbl( stdout, "\\n\\nSQL statement table:\\n", sql );

	clrtbl( sql, free );

	fprintf( stdout, "Sleeping 5 sec before checking for updates..." );
	fflush( stdout );
	sleep( 5 );
	fprintf( stdout, "awake again\\n" );

	dbmon_update( dbmon_hook, (void *) &sql );

	elog_flush( 1, 0 );

	debugtbl( stdout, "\\n\\nSQL statement table:\\n", sql );

	dbmon_close( &dbmon_hook );
	
	freetbl( sql, free ); 
}

.fi
.ft R
.in
.SH RETURN VALUES
\fBdbschema2sqlcreate\fP returns a table of SQL create statements. Both the table and the individual
statements are newly allocated, and must be freed by the caller. 

\fBdb2sqlinsert\fP returns the number of SQL commands successfully created. 

\fBdb2sql_get_syncfield_name\fP returns a newly-allocated character string which must be freed by the caller. 

.SH "SEE ALSO"
.nf
db2sql(1), perldb2sql(3P)
.fi
.SH "BUGS AND CAVEATS"
Primary keys indicating ranges in Datascope, e.g. "time::endtime", are decoupled and added to the SQL primary key 
as individual fields (e.g. PRIMARY KEY( ... time, endtime, ... )), since SQL schemata appear not to support ranges 
as primary keys. 

The SQL format emitted by \fBdb2sql\fP is currently tailored for MySQL. The option is open in the future to expand 
this to support other SQL variants. 

If no \fIcreatesync\fP function is specified to \fBdb2sqlinsert\fP, the synchronization string will be left as NULL.

MySQL SQL does not allow a default value for fields of type \fITEXT\fP, therefore none is used for fields of this type. 

If default values are being defined in the SQL version of the Datascope schema, invalid null values in the Datascope 
schema (i.e. null values not conforming to the stated format of the attribute) will prevent the corresponding table 
from being created in the SQL database. 
.SH AUTHOR
.nf
Kent Lindquist 
Lindquist Consulting, Inc.
.fi
.\" $Id: manpage_template,v 1.13 2007/08/23 16:24:12 kent Exp $
