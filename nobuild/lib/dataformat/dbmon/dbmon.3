.TH DBMON 3
.SH NAME
dbmon_init, dbmon_resync, dbmon_update, dbmon_status, dbmon_close, dbmon_compute_row_sync \- monitor a Datascope database for changes
.SH SYNOPSIS
.nf

#include "dbmon.h"

Hook *\fBdbmon_init\fP( Dbptr \fIdb\fP, Tbl *\fItable_subset\fP, 
                  void (*\fInewrow\fP)(Dbptr db, char *table, long irecord, char *sync, void *pvt), 
                  void (*\fIdelrow\fP)(Dbptr db, char *table, char *oldsync, void *pvt), 
                  Tbl *(*\fIquerysyncs\fP)(Dbptr db, char *table, void *pvt),
                  int \fIflags\fP );

int \fBdbmon_resync\fP( Hook *\fIdbmon_hook\fP, void *\fIpvt\fP );

int \fBdbmon_update\fP( Hook *\fIdbmon_hook\fP, void *\fIpvt\fP );

void \fBdbmon_status\fP( FILE *\fIfp\fP, Hook *\fIdbmon_hook\fP );

void \fBdbmon_close\fP( Hook **\fIdbmon_hook\fP );

char *\fBdbmon_compute_row_sync\fP( Dbptr \fIdb\fP );

.fi
.SH DESCRIPTION
The \fBdbmon_init\fP function begins tracking a dynamically updating
Datascope database. The \fIdb\fP database pointer indicates the
database to be tracked. If the \fItable_subset\fP is null, all
tables are tracked.  If this argument is a list of string names for
database tables (see strtbl(3)), tracking is limited to the named
tables.  \fBdbmon_init\fP returns a hook(3) pointer which is used
in subsequent calls to interact with the tracked monitoring status
of the database. Three callbacks are registered when invoking
\fBdbmon_init\fP: \fInewrow\fP, \fIdelrow\fP, and \fIquerysyncs\fP.
The pointer to the \fIquerysyncs\fP callback function is allowed to be 
\fINULL\fP, effectively disabling the \fBdbmon_resync\fP function described
below. 

After calling \fBdbmon_init\fP, the calling program may call the \fBdbmon_resync\fP
function, if desired, to compare results from past monitoring with 
the current database and respond to any changes.  After that, the calling 
program must call the \fBdbmon_update\fP function at desired intervals to trigger 
updates based on changes to the monitored database. (If the calling 
program omits the call to \fBdbmon_resync\fP, the first call
to \fBdbmon_update\fP assumes the calling application knows nothing about 
the monitored database).

If the \fBdbmon_resync\fP function is called, the \fIquerysyncs\fP callback 
is invoked for each monitored table, asking the calling program for 
a table of the synchronization strings the program already knows about 
for that table (presumably from state saved by a previous execution of 
the program). The \fIquerysyncs\fP function is given the database pointer 
for the database (merely for informational purposes; in most cases said pointer
would not be used), the name of the table for which the sync strings are 
being requested, and the private pointer \fIpvt\fP which was passed 
to \fBdbmon_resync\fP. The \fIquerysyncs\fP callback must return a 
newly allocated \fITbl\fP (see tbl(3)) containing newly allocated copies of all known 
synchronization strings for the table in question After using said 
\fITbl\fP, \fBdbmon_resync\fP will free it with a call to 
.nf

freetbl( atbl, free );

.fi

For each Datascope database row newly detected by \fBdbmon_update\fP,
a database pointer pointing to the scratch record,
which will contain a copy of the new row, is given by \fBdbmon_update\fP as the first argument
to the \fInewrow\fP callback. The second argument to the \fInewrow\fP
callback is the Datascope table-name containing the row in question.
The third argument is the actual row number of the row in the table.
The fourth argument is a string computed by \fBdbmon_update\fP
intended to be a unique signature of the database row. This can be used
as desired by the calling application to identify the returned row
in future operations. The fifth argument to the \fInewrow\fP callback
is a void pointer \fIpvt\fP, the same as the \fIpvt\fP
pointer provided to the \fBdbmon_update\fP function. This private
pointer may be used by the application programmer writing callbacks
to handle more complex behavior for each database row, for example
the \fIpvt\fP pointer may reference a data structure for
transformed rows or instructions to another utility.

For database rows that \fBdbmon_update\fP concludes have been marked
for deletion, the \fIdelrow\fP callback is invoked, with the
\fIoldsync\fP string holding the value of the synchronization string
from before the row was marked. The \fItable\fP-name argument
indicates the database table from which the row was deleted. The
database pointer is provided as a convenience to the programmer and
does not contain any information about the row from before it was
marked for deletion.

The \fBdbmon_status\fP function is a debugging utility which prints
what is known internal to the library about the current status of
the database represented by the tracking hook.

The \fBdbmon_close\fP function stops tracking a previously tracked
Datascope database, freeing all tracking structures.

The \fBdbmon_compute_row_sync\fP function computes a synchronization
string for a given database row, used internally for tracking
functions and possibly useful externally as well to coordinate with
other operations. The returned character string should be freed by
the caller when no longer needed.

.SH EXAMPLE
The example below, taken from the certify(1) tests for the dbmon
library, shows a database being monitored, with some artificial
updates accomplished via system calls to copy alternate versions
of one of the database tables over the initial copy:
.in 2c
.ft CW
.nf

%cat certify/try_dbmon.c

#include <stdlib.h>
#include "db.h"
#include "stock.h"
#include "dbmon.h"
#include "db2sql.h"

void newrow( Dbptr db, char *table, long irecord, char *sync, void *pvt );
void delrow( Dbptr db, char *table, char *sync, void *pvt );

void
newrow( Dbptr db, char *table, long irecord, char *sync, void *pvt )
{ 
	char	row[10*STRSZ];
	FILE	*fp = (FILE *) pvt;

	dbget( db, row );
	
	fprintf( fp, "New Row %ld in '%s' [sync '%s']: %s\\n", irecord, table, sync, row );

	return;
}

void
delrow( Dbptr db, char *table, char *sync, void *pvt )
{ 
	FILE	*fp = (FILE *) pvt;

	fprintf( fp, "Deleted row from '%s' with sync '%s'\\n", table, sync );

	return;
}

int
main(int argc, char **argv )
{
	Dbptr	db;
	char	dbname[FILENAME_MAX];
	Hook	*dbmon_hook = NULL;
	Tbl	*tables = (Tbl *) NULL; 

	if( argc != 2 ) {

		elog_die( 0, "Usage: %s dbname\\n", argv[0] );

	} else {
		
		strcpy( dbname, argv[1] );
	}

	dbopen_database( dbname, "r", &db );

	dbmon_hook = dbmon_init( db, tables, newrow, delrow, NULL, 0 );

	dbmon_update( dbmon_hook, (void *) stdout );

	fprintf( stdout, "Adding new arrival table:\\n" );

	system( "cp data/mod.new.demo.arrival results/dbmon/demo.arrival" );

	sleep( 1 );

	dbmon_update( dbmon_hook, (void *) stdout );

	fprintf( stdout, "Shortening arrival table:\\n" );

	system( "cp data/mod.shorter.demo.arrival results/dbmon/demo.arrival" );

	sleep( 1 );

	dbmon_update( dbmon_hook, (void *) stdout );

	fprintf( stdout, "Lengthening arrival table:\\n" );

	system( "cp data/mod.longer.demo.arrival results/dbmon/demo.arrival" );

	sleep( 1 );

	dbmon_update( dbmon_hook, (void *) stdout );

	dbmon_status( stdout, dbmon_hook );

	elog_clear_register( 1 );

	free_hook( &dbmon_hook );

	dbclose( db );

	exit( 0 );
}
.fi
.ft R
.in
.SH RETURN VALUES
\fBdbmon_init\fP returns a hook(3) pointer used in subsequent calls to the dbmon library. 

\fBdbmon_update\fP returns 0. \fBdbmon_status\fP and \fBdbmon_close\fP do not return anything. 

\fBdbmon_compute_row_sync\fP returns a char pointer with a string representation of the sync value 
for the given database row. The pointer must be freed by the caller. 
.SH LIBRARY
-ldbmon
.SH "SEE ALSO"
.nf
perldbmon(3p), db2sql(3)
.fi
.SH "BUGS AND CAVEATS"
The \fIflags\fP argument to \fBdbmon_init\fP is not yet used and should be set to 0. 

If the database descriptor-file changes such that there is a change
to which underlying files are referenced for each database table,
the dbmon library will not adjust dynamically.

For databases being modified and read by multiple processes (e.g.
real-time databases), rows for deletion should be marked with
dbmark(3) and left in place. The \fBdbmon_update\fP function does
assume the \fBorb2db_msg\fP program is on the execution path, running
that command with the \fIwait\fP option on the database before
proceeding with each table.  This allows other real-time processes
to execute cleanup operations provided they invoke \fBorb2db_msg(1)\fP
before doing so.

The dbmon library does not yet monitor external files, though perhaps should. 

In addition to the database pointer for a given row, the corresponding
table name is passed to the callback functions, even though the
table name could also be derived from a dbquery(3) call on the
database pointer. This is done as a convenience to the programmer
implementing the callbacks.

The \fInewrow\fP callback is given scratch records with copies of
the new rows, rather than being given the new rows themselves, in
order to keep the transactions atomic: i.e. to make sure the operation
performed on the database row in the callback is done on exactly
the same row for which the sync string was computed internal to the
dbmon library. This is necessary for databases that may be changing
more rapidly than the refresh rate of the dbmon library. An alternative
solution would be to force all other database-write operations to
suspend during a dbmon refresh operation, however that demands a
more stringent trade-off between real-time process latency and dbmon
latency, which seems less desirable.


.SH AUTHOR
.nf
Dr. Kent Lindquist 
Lindquist Consulting, Inc. 
.fi
