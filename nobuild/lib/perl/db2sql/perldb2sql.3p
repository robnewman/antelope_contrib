.TH PERLDB2XML 3P "$Date$"
.SH NAME
perldb2sql \- Perl extension of db2sql
.SH SYNOPSIS
.nf
use Datascope;
use Datascope::db2sql;

@sql = \fBdbschema2sqlcreate\fP( @db [, $flags] );

@sql = \fBdb2sqlinsert\fP( @db [, \\&createsync] [, $flags] );

@sql = \fBdb2sqldelete\fP( @db, $sync [, $flags] );

$name = \fBdb2sql_get_syncfield_name\fP();

\fBdb2sql_set_syncfield_name\fP( $name );

.fi
.SH DESCRIPTION
The perl \fBdb2sql\fP functions mimic the c-callable db2sql(3) routines, 
allowing arbitrary database views to be converted to SQL \fICREATE\fP and 
\fIINSERT\fP statements with which they can be loaded into a SQL database. 

The \fBdbschema2sqlcreate\fP function extracts all tables referenced 
in the input database view, generating an array of strings containing 
SQL \fICREATE\fP statements for each table. 

The \fBdb2sqlinsert\fP function extracts all base-table rows referenced 
in the input database view, generating an array of strings containing SQL
\fIINSERT\fP statements for each row. If a \fIcreatesync\fP function is specified,
\fBdb2sqlinsert\fP will pass a database pointer for each row to the 
\fIcreatesync\fP function and insert the  character-string 
sync value returned by \fIcreatesync\fP. The default value of the sync field 
name (currently \fIsyncstring\fP) will be used for this insertion 
unless otherwise configured via \fBdb2sql_set_syncfield_name\fP.

The \fBdb2sqldelete\fP function creates a SQL \fIDELETE\fP command for the 
database row in the table specified by the input database pointer
and described by the specified \fI$sync\fP string. 

The \fBdb2sql_get_syncfield_name\fP function returns the name 
of the SQL syncronization field, currently defaulting to the value \fIsyncstring\fP.

The \fBdb2sql_set_syncfield_name\fP function changes the name of the SQL 
synchronization field (see db2sql(3)) from the default value, in the 
rare cases in which this may be necessary. 

.SH EXAMPLE
.in 2c
.ft CW
.nf

: # use perl
eval 'exec perl -S $0 "$@"'
if 0;

use lib "$ENV{ANTELOPE}/data/perl" ;

use Datascope;
use Datascope::db2sql;

@db = dbopen( "/opt/antelope/data/db/demo/demo", "r" );

@db = dblookup( @db, "", "origin", "", "" );

print join( "\\n", dbschema2sqlcreate( @db ) );

print join( "\\n", db2sqlinsert( @db ) );

print "\\n";

.fi
.ft R
.in
The example above produces the following output: 
.in 2c
.ft CW
.nf

%perl test.pl

CREATE TABLE `origin`
  (
  `lat`        DECIMAL(9,4) DEFAULT -999.0000,
  `lon`        DECIMAL(9,4) DEFAULT -999.0000,
  `depth`      DECIMAL(9,4) DEFAULT -999.0000,
  `time`       DECIMAL(17,5) DEFAULT -9999999999.99900,
  `orid`       INTEGER(8) DEFAULT -1,
  `evid`       INTEGER(8) DEFAULT -1,
  `jdate`      INTEGER(8) DEFAULT -1,
  `nass`       INTEGER(4) DEFAULT -1,
  `ndef`       INTEGER(4) DEFAULT -1,
  `ndp`        INTEGER(4) DEFAULT -1,
  `grn`        INTEGER(8) DEFAULT -1,
  `srn`        INTEGER(8) DEFAULT -1,
  `etype`      CHAR(2) DEFAULT '-',
  `review`     CHAR(4) DEFAULT '-',
  `depdp`      DECIMAL(9,4) DEFAULT -999.0000,
  `dtype`      CHAR(1) DEFAULT '-',
  `mb`         DECIMAL(7,2) DEFAULT -999.00,
  `mbid`       INTEGER(8) DEFAULT -1,
  `ms`         DECIMAL(7,2) DEFAULT -999.00,
  `msid`       INTEGER(8) DEFAULT -1,
  `ml`         DECIMAL(7,2) DEFAULT -999.00,
  `mlid`       INTEGER(8) DEFAULT -1,
  `algorithm`  CHAR(15) DEFAULT '-',
  `auth`       CHAR(15) DEFAULT '-',
  `commid`     INTEGER(8) DEFAULT -1,
  `lddate`     DECIMAL(17,5) DEFAULT -9999999999.99900,
  PRIMARY KEY (`time`, `lat`, `lon`, `depth`, `ndef`, `nass`)
  );
INSERT INTO `origin` VALUES(  40.0740,   69.1640,  155.1660,   704371900.66886,        1,       -1,  1992118,    7,    7,   -1,      715,       48, '-', '', -999.0000, 'f',    2.62,        1, -999.00,       -1, -999.00,       -1, 'locsat:kyrghyz', 'JSPC',       -1,   790466871.00000);

INSERT INTO `origin` VALUES(  36.9340,   71.0010,    0.0000,   704397756.21221,        2,       -1,  1992118,    7,    7,   -1,      717,       48, '-', '', -999.0000, 'f',    3.72,        2, -999.00,       -1, -999.00,       -1, 'locsat:kyrghyz', 'JSPC',       -1,   790466871.00000);
 ....
 ....
 ....
.fi
.ft R
.in
.SH RETURN VALUES
\fBdbschema2sqlcreate\fP, \fBdb2sqlinsert\fP, and \fBdb2sqldelete\fP all return Perl lists of SQL string commands
to be delivered to a SQL interpreter. 

\fBdb2sql_get_syncfield_name\fP returns the current value of the SQL synchronization string name. 
.SH "SEE ALSO"
.nf
db2sql(3), db2sql(1), perldb(3P), perldbmon(3P)
.fi
.SH "BUGS AND CAVEATS"
See the db2sql(3) man-page for caveats. 
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting, Inc.
.fi
.\" $Id$
