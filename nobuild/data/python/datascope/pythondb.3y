.TH PYTHONDB 3P 
.SH NAME
pythondb \- Python interface to Datascope
.SH SYNOPSIS
.nf
sys.path.append( os.environ['ANTELOPE'] + '/local/data/python' )

from antelope.datascope import *
.fi
.SH DESCRIPTION
The Python Interface to Datascope allows one to perform operations 
on Datascope databases from the Python scripting language. 
Following are brief descriptions of the functions implemented.

Many of these python functions are direct wrappers around the
C-language interfaces in the Datascope library. This man-page
documents the syntax of these commands as represented in this Python
interface. Further information on how to use any given command and
the actual work it performs may be obtained from the man
page for the C-language version of the respective command. For
example, this man page will explain the syntax of the python
\fIdbsubset\fP function. However, for a full explanation of dbsubset,
see the dbsubset(3) man page.

The python calls may be used in two ways, either in a procedural 
style or in an object style invocation. Either way, a database pointer 
is returned, which is a Python object containing four fields, 
the standard database, table, field, and record indices (for further 
information see dbintro(3)). Database pointers may be addressed one of 
several ways. For example, to address the record number, you can use 
.nf

>>> db = dbopen( '/opt/antelope/data/db/demo/demo','r')
>>> db
[Dbptr:
        database = 0
        table    = -501
        field    = -501
        record   = -501
]

>>> db.record
-501

>>> db[3]
-501

>>> db['record']
-501
>>> 

.fi

Upon encountering problems, these routines will raise exceptions
from the \fIElogException\fP class of Python Exceptions defined in
the antelope.stock module (see pythonstock(3P)), and incorporated
internally into this module. This class of exceptions has the several
subclasses \fIElogLog\fP, \fIElogNotify\fP, \fIElogComplain\fP, and
\fIElogDie\fP. \fIElogException\fP objects define the two attributes
e.\fIseverity\fP and e.\fIstring\fP, where e.\fIstring\fP is a
string message associated with the exception and e.\fIseverity\fP
is an integer severity indicator which will be one of ELOG_LOG,
ELOG_NOTIFY, ELOG_COMPLAIN, ELOG_DIE, ELOG_FAULT, ELOG_ALERT, or
ELOG_DEBUGGING.

.SS Datascope functions

.IP "\fBdbopen\fP (database, permissions)"
Returns a database pointer to the specified database.
.ft CW
.in 2c
.nf
.ne 3

db = dbopen( database, "r+" ) 

or

db = dbopen( database )

.fi
.in
.ft R

.IP "\fBdbclose\fP (db)"
Close an open database
.ft CW
.in 2c
.nf
.ne 3

dbclose( db )

or

db.close()

.fi
.in
.ft R

.IP "\fBdbfree\fP (db)"
Free Datascope memory
.ft CW
.in 2c
.nf
.ne 3

dbfree( db )

or

db.free()

.fi
.in
.ft R

.IP "\fBdbdestroy\fP (db)"
Completely eliminate all tables in a database
.ft CW
.in 2c
.nf
.ne 3

db.dbdestroy()

.fi
.in
.ft R

.IP "\fBdbcreate\fP (filename, schema, dbpath = None, description = None, detail = None)"
Create a new database descriptor file
.ft CW
.in 2c
.nf
.ne 3

dbcreate(database_name)

.fi
.in
.ft R

.IP "\fBdbtmp\fP (schema)"
Create a temporary database
.ft CW
.in 2c
.nf
.ne 3

db = dbtmp(schema)

.fi
.in
.ft R

.IP "\fBdbdelete\fP (db)"
Delete Datascope database rows
.ft CW
.in 2c
.nf
.ne 3

dbdelete( db )

or

db.delete()

.fi
.in
.ft R

.IP "\fBdbinvalid\fP (db)"
Return a database pointer with dbINVALID values, or set a database pointer to dbINVALID values
.ft CW
.in 2c
.nf
.ne 3

db = dbinvalid( db )

or

db.invalid()

.fi
.in
.ft R

.IP "\fBdbmark\fP (db)"
Mark Datascope database rows for deletion
.ft CW
.in 2c
.nf
.ne 3

dbmark( db )

or

db.mark()

.fi
.in
.ft R

.IP "\fBdbcrunch\fP (db)"
Delete marked database rows
.ft CW
.in 2c
.nf
.ne 3

dbcrunch( db )

or

db.crunch()

.fi
.in
.ft R

.IP "\fBdbtruncate\fP (db, nrecords)"
Truncate a database table
.ft CW
.in 2c
.nf
.ne 3

dbtruncate( db, nrecords )

.fi
.in
.ft R

.IP "\fBtrtruncate\fP (db, leave)"
Truncate a trace-object database table
.ft CW
.in 2c
.nf
.ne 3

trtruncate( db, leave )

.fi
.in
.ft R

.IP "\fBdblookup\fP (dbptr, database, table, field, record)"
Aim a database pointer at part of a database
.ft CW
.in 2c
.nf
.ne 3

db = dblookup( db, '', 'origin', '', '' )

or 

db.lookup( '', 'origin', '', '' )

or

db.lookup( table='origin' )

.fi
.in
.ft R

.IP "\fBdbsubset\fP (dbptr, expr)"
Subset a database view
.ft CW
.in 2c
.nf
.ne 3

db = dbsubset( db, "orid == 645" )

or

db.subset( "orid == 645" )

.fi
.in
.ft R

.IP "\fBdblist2subset\fP (dbptr, list)"
Convert a list of records to a database subset
.ft CW
.in 2c
.nf
.ne 3

db = dblist2subset( db, rownumber_list )

or

db.list2subset( rownumber_list )

.fi
.in
.ft R

.IP "\fBdbsort\fP (dbptr, key)"
Sort a database view
.ft CW
.in 2c
.nf
.ne 3

db = dbsort( db, 'time' )

or 

db.sort( 'time' )

.fi
.in
.ft R

.IP "\fBdbgroup\fP (dbptr, groupfields, name=None, type=1)"
Group a sorted table
.ft CW
.in 2c
.nf
.ne 3

db = dbgroup( db, groupfields )

or 

db.group( groupfields )

.fi
.in
.ft R

.IP "\fBdbungroup\fP (dbptr, name=None)"
Ungroup a grouped table
.ft CW
.in 2c
.nf
.ne 3

db = dbungroup( db )

or 

db.ungroup()

.fi
.in
.ft R

.IP "\fBdbjoin\fP (db1, db2)"
Join two database views
.ft CW
.in 2c
.nf
.ne 3

db = dbjoin( db1, db2 )

or

db1.join( db2 )

or

db1.join( 'assoc' )

.fi
.in
.ft R

.IP "\fBdbunjoin\fP (db, database_name, rewrite=False)"
Create new tables from a joined table
.ft CW
.in 2c
.nf
.ne 3

dbunjoin( db, database_name )

or

db.unjoin( database_name )

.fi
.in
.ft R

.IP "\fBdbtheta\fP (db1, db2, expression, outer=False, name=None)"
Theta-join two database views
.ft CW
.in 2c
.nf
.ne 3

db = dbtheta( db1, db2, expr )

or

db1.theta( db2, expr )

or

db1.theta( 'assoc', expr )

.fi
.in
.ft R

.IP "\fBdbnojoin\fP (db1, db2)"
Find rows which don't join between two database rows
.ft CW
.in 2c
.nf
.ne 3

db = dbnojoin( db1, db2 )

or

db1.nojoin( db2 )

or

db1.nojoin( 'assoc' )

.fi
.in
.ft R

.IP "\fBdbseparate\fP (dbptr, tablename)"
Extract a subset of a base table
.ft CW
.in 2c
.nf
.ne 3

db = dbseparate( db, 'origin' )

or 

db.separate( 'origin' )

.fi
.in
.ft R

.IP "\fBdbsever\fP (dbptr, tablename)"
Remove a table from a joined view
.ft CW
.in 2c
.nf
.ne 3

db = dbsever( db, 'origin' )

or 

db.sever( 'origin' )

.fi
.in
.ft R

.IP "\fBdbprocess\fP (db, cmdlist)"
Run a series of database operations
.ft CW
.in 2c
.nf
.ne 3

db = dbprocess( db, cmdlist )

or 

db.process( cmdlist )

.fi
.in
.ft R

.IP "\fBdbget\fP (db [, 0] )"
Get an entire table, field, or record from a base table
.ft CW
.in 2c
.nf
.ne 3

value = dbget( db )

or 

value = db.get()

.fi
.in
.ft R

.IP "\fBdbput\fP (db [, record] )"
Put an entire table, field, or record into a base table
.ft CW
.in 2c
.nf
.ne 3

dbput( db )

or 

db.put()

.fi
.in
.ft R

.IP "\fBdbgetv\fP (db, field_name [,field_name, ...] )"
Get values from a database row
.ft CW
.in 2c
.nf
.ne 3

values = dbgetv( db, 'lat', 'lon' )

or 

values = db.getv( 'lat', 'lon' )

.fi
.in
.ft R

.IP "\fBdbaddv\fP (db, field_name, value [,field_name, value, ...] )"
Add values to a new database row
.ft CW
.in 2c
.nf
.ne 3

dbaddv( db, 'lat', 61,.5922, 'lon', -149.130 )

or 

db.addv( 'lat', 61.5922, 'lon', -149.130 )

.fi
.in
.ft R

.IP "\fBdbputv\fP (db, field_name, value [,field_name, value, ...] )"
Write fields in a database row
.ft CW
.in 2c
.nf
.ne 3

dbputv( db, 'lat', 61,.5922, 'lon', -149.130 )

or 

db.putv( 'lat', 61.5922, 'lon', -149.130 )

.fi
.in
.ft R

.IP "\fBdbaddnull\fP (db)"
Add a new, null row to a table
.ft CW
.in 2c
.nf
.ne 3

record_num = dbaddnull( db )

or 

db.addnull()

.fi
.in
.ft R

.IP "\fBdbextfile\fP (db, tablename = None)"
Compose filename from database record for a given table
.ft CW
.in 2c
.nf
.ne 3

fname = dbextfile( db )

or 

fname = db.extfile()

.fi
.in
.ft R

.IP "\fBdbfilename\fP (db)"
Compose filename from database record
.ft CW
.in 2c
.nf
.ne 3

fname = dbfilename( db )

or 

fname = db.filename()

.fi
.in
.ft R

.IP "\fBdbquery\fP (db, dbcode)"
Retrieve ancillary information about a database
.ft CW
.in 2c
.nf
.ne 3

nrecs = dbquery( db, dbRECORD_COUNT )

or 

nrecs = db.query( dbRECORD_COUNT )

.fi
.in
.ft R

.IP "\fBdbnrecs\fP (db)"
Retrieve number of records in a database view
.ft CW
.in 2c
.nf
.ne 3

nrecs = dbnrecs( db )

or 

nrecs = db.nrecs()

.fi
.in
.ft R

.IP "\fBdbnextid\fP (db, name)"
Generate a unique id from the lastid table
.ft CW
.in 2c
.nf
.ne 3

arid = dbnextid( db, 'arid' )

or 

arid = db.nextid( 'arid' )

.fi
.in
.ft R

.IP "\fBdbex_eval\fP (db, expr)"
Evaluate a database expression
.ft CW
.in 2c
.nf
.ne 3

result = dbex_eval( db, expr )

or 

result = db.ex_eval( expr )

.fi
.in
.ft R

.IP "\fBdbmatches\fP (db, dbt, hookname, kpattern = None, tpattern = None)"
Find matching records in second table
.ft CW
.in 2c
.nf
.ne 3

resultlist = dbmatches( db, dbt, hookname )

or 

resultlist = db.matches( db, dbt, hookname )

.fi
.in
.ft R

.IP "\fBdbfind\fP (db, expr, first = -1, reverse = False)"
Search for matching record in a table
.ft CW
.in 2c
.nf
.ne 3

record = dbfind( db, expr )

or 

record = db.find( expr )

.fi
.in
.ft R

.IP "\fBdb2xml\fP (db, rootnode = None, rownode = None, fields = None, expressions = None, primary = False)"
Convert a database view to XML
.ft CW
.in 2c
.nf
.ne 3

xmlstring = db2xml( db )

or 

xmlstring = db.xml( db )

.fi
.in
.ft R

.IP "\fBtrwfname\fP (db, pattern )"
Generate waveform file names
.ft CW
.in 2c
.nf
.ne 3

fname = trwfname( db, pattern )

or 

fname = db.trwfname( pattern )

.fi
.in
.ft R

.IP "\fBtrsample\fP (db, t0, t1, sta, chan, apply_calib = False, filter = None)"
Return time-series data for a given station, channel, and time-interval
.ft CW
.in 2c
.nf
.ne 3

v = db.sample(706139719.05000, 706139855.95000, "TKM", "BHZ", True)

or

v = trsample(db, 706139719.05000, 706139855.95000, "TKM", "BHZ", True)

.fi
.in
.ft R

.IP "\fBtrsamplebins\fP (db, t0, t1, sta, chan, binsize, apply_calib = False, filter = None)"
Return binned time-series data for a given station, channel, and time-interval
.ft CW
.in 2c
.nf
.ne 3

v = db.samplebins(706139719.05000, 706139855.95000, "TKM", "BHZ", 50, True)

or

v = trsamplebins(db, 706139719.05000, 706139855.95000, "TKM", "BHZ", 50, True)

.fi
.in
.ft R

.IP "\fBtrloadchan\fP (db, t0, t1, sta, chan)"
Load a station-channel of data into a trace object
.ft CW
.in 2c
.nf
.ne 3

tr = trloadchan( db, 706139719.05000, 706139855.95000, "TKM", "BHZ" )

or

tr = db.loadchan( 706139719.05000, 706139855.95000, "TKM", "BHZ" )

.fi
.in
.ft R

.IP "\fBtrload_css\fP (db, t0, t1, tr = None, table = None)"
Load waveform data into memory
.ft CW
.in 2c
.nf
.ne 3

tr = trload_css( db, 706139719.05000, 706139855.95000 )

or

tr = db.load_css( 706139719.05000, 706139855.95000 )

.fi
.in
.ft R

.IP "\fBtrload_cssgrp\fP (db, t0, t1, tr = None, table = None)"
Load sorted waveform data into memory
.ft CW
.in 2c
.nf
.ne 3

tr = trload_cssgrp( db, 706139719.05000, 706139855.95000 )

or

tr = db.load_cssgrp( 706139719.05000, 706139855.95000 )

.fi
.in
.ft R

.IP "\fBtrfilter\fP (tr, filter_string)"
Apply time-domain filters to waveform data
.ft CW
.in 2c
.nf
.ne 3

tr = trfilter(tr, filter_string)

or

v = tr.filter( filter_string)

.fi
.in
.ft R

.IP "\fBtrapply_calib\fP (tr)"
Apply calibration values to data points in a trace-object
.ft CW
.in 2c
.nf
.ne 3

trapply_calib( tr )

or

tr.apply_calib()

.fi
.in
.ft R

.IP "\fBtrdata\fP (tr)"
Extract a vector of samples from a trace-object row
.ft CW
.in 2c
.nf
.ne 3

v = trdata( tr )

or

v = tr.data()

.fi
.in
.ft R

.IP "\fBtrdatabins\fP (tr)"
Obtain binned data points from trace-table record
.ft CW
.in 2c
.nf
.ne 3

v = trdatabins( tr, binsize )

or

v = tr.databins( binsize )

.fi
.in
.ft R

.IP "\fBtrrotate\fP (tr, phi_deg, theta_deg, newchan)"
Rotate traces to new orientantion and component names
.ft CW
.in 2c
.nf
.ne 3

phi_deg = 45

theta_deg = -75

newchan = ( "A", "B", "C" )

trrotate( tr, phi_deg, theta_deg, newchan )

or

tr.rotate( phi_deg, theta_deg, newchan )

.fi
.in
.ft R

.IP "\fBtrrotate_to_standard\fP (tr, newchan = ('E', 'N', 'Z'))"
Rotate traces to standard orientantion
.ft CW
.in 2c
.nf
.ne 3

trrotate_to_standard( tr )

or 

newchan = ( "A", "B", "C" )

trrotate_to_standard( tr, newchan )

or

tr.rotate_to_standard()

or

newchan = ( "A", "B", "C" )

tr.rotate_to_standard( newchan )

.fi
.in
.ft R

.IP "\fBtrsplice\fP (tr)"
Splice together data segments
.ft CW
.in 2c
.nf
.ne 3

trsplice( tr )

or

tr.splice()

.fi
.in
.ft R

.IP "\fBtrsplit\fP (tr)"
Split data segments with marked gaps
.ft CW
.in 2c
.nf
.ne 3

trsplit( tr )

or

tr.split()

.fi
.in
.ft R

.IP "\fBtrcopy\fP (tr)"
Copy trace table including the trace data
.ft CW
.in 2c
.nf
.ne 3

trout = trcopy(trin)

or

trout = trin.trcopy()

.fi
.in
.ft R

.IP "\fBtrfree\fP (tr)"
Free up memory buffers and clear trace object tables
.ft CW
.in 2c
.nf
.ne 3

trfree(tr)

or

tr.trfree()

.fi
.in
.ft R

.IP "\fBtrdestroy\fP (tr)"
Close a trace database, cleaning up memory and files
.ft CW
.in 2c
.nf
.ne 3

trdestroy(tr)

or

tr.trdestroy()

.fi
.in
.ft R

.SS Response Functions

.IP "\fBResponse\fP (filename)"
Create a Datascope Response object
.ft CW
.in 2c
.nf
.ne 3

Response( filename )

.fi
.in
.ft R

.IP "\fBeval_response\fP (resp, omega)"
Evaluate a Datascope Response object at an angular frequency
.ft CW
.in 2c
.nf
.ne 3

resp = Response(fname)

r = resp.eval(5 * 2 * math.pi)

or 

r = eval_response( resp, 5 * 2 * math.pi )

.fi
.in
.ft R

.SH EXAMPLE
A short example is shown below. Examples of each command are available in the unittest 
section at the end of the file $(ANTELOPE)/data/python/antelope/datascope.py.
.in 2c
.ft CW
.nf

import sys
import os
import pylab

sys.path.append( os.environ['ANTELOPE'] + '/local/data/python' )

from antelope.datascope import *

db = dbopen( "/opt/antelope/data/db/demo/demo", "r" )

tr = trloadchan( db, 706139719.05000, 706139855.95000, "TKM", "BHZ" )

tr[3] = 0

v = trdata( tr )

pylab.plot(v)

pylab.savefig('dataplot.png',dpi=100)

os.system( "open dataplot.png" )

.fi
.ft R
.in
.SH "SEE ALSO"
.nf
pythonorb(3y), pythonstock(3y)
.fi
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting, Inc. 
.fi
