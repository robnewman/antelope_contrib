.TH PYTHONSTOCK 3P 
.SH NAME
pythonstock \- Python interface to Antelope stock library
.SH SYNOPSIS
.nf
sys.path.append( os.environ['ANTELOPE'] + '/local/data/python' )

from antelope.stock import *
.fi
.SH DESCRIPTION
The Python Interface to the Antelope stock library allows one to perform operations 
from the Antelope libstock.so shared-object library in the Python scripting language. 

Upon encountering problems, these routines will raise exceptions
from the \fIElogException\fP class of Python Exceptions defined in
this module. This class of exceptions has the several subclasses
\fIElogLog\fP, \fIElogNotify\fP, \fIElogComplain\fP, and \fIElogDie\fP.
\fIElogException\fP objects define the two attributes e.\fIseverity\fP
and e.\fIstring\fP, where e.\fIstring\fP is a string message
associated with the exception and e.\fIseverity\fP is an integer
severity indicator which will be one of ELOG_LOG, ELOG_NOTIFY,
ELOG_COMPLAIN, ELOG_DIE, ELOG_FAULT, ELOG_ALERT, or ELOG_DEBUGGING.

Following are brief descriptions of the functions implemented.

.SS Datascope functions
.IP "\fBpfget_string\fP (pfname, pfkey)"
Retrieve a string value from a parameter file
.ft CW
.in 2c
.nf
.ne 3

s = pfget_string( pfname, pfkey )

.fi
.in
.ft R

.IP "\fBpfget_time\fP (pfname, pfkey)"
Retrieve a time value from a parameter file
.ft CW
.in 2c
.nf
.ne 3

e = pfget_time( pfname, pfkey )

.fi
.in
.ft R

.IP "\fBpfget_size\fP (pfname, pfkey)"
Retrieve a size value from a parameter file
.ft CW
.in 2c
.nf
.ne 3

s = pfget_size( pfname, pfkey )

.fi
.in
.ft R

.IP "\fBpfget_double\fP (pfname, pfkey)"
Retrieve a floating-point value from a parameter file
.ft CW
.in 2c
.nf
.ne 3

val = pfget_double( pfname, pfkey )

.fi
.in
.ft R

.IP "\fBpfget_int\fP (pfname, pfkey)"
Retrieve an integer value from a parameter file
.ft CW
.in 2c
.nf
.ne 3

val = pfget_int( pfname, pfkey )

.fi
.in
.ft R

.IP "\fBpfget_boolean\fP (pfname, pfkey)"
Retrieve a boolean value from a parameter file
.ft CW
.in 2c
.nf
.ne 3

tf = pfget_boolean( pfname, pfkey )

.fi
.in
.ft R

.IP "\fBpfget_tbl\fP (pfname, pfkey)"
Retrieve a table (list) value from a parameter file
.ft CW
.in 2c
.nf
.ne 3

tf = pfget_tbl( pfname, pfkey )

.fi
.in
.ft R

.IP "\fBpfget_arr\fP (pfname, pfkey)"
Retrieve an array (dictionary) value from a parameter file
.ft CW
.in 2c
.nf
.ne 3

tf = pfget_arr( pfname, pfkey )

.fi
.in
.ft R

.IP "\fBpfget\fP (pfname, pfkey = None)"
Retrieve an arbitrary value from a parameter file, attempting to guess the correct data type. 
If the pfkey is left empty, the entire parameter-file is returned. 
.ft CW
.in 2c
.nf
.ne 3

val = pfget( pfname, pfkey )

.fi
.in
.ft R

.IP "\fBpfout\fP (pfname, file)"
Write a file to the specified file object
.ft CW
.in 2c
.nf
.ne 3

pfout( pfname, file )

.fi
.in
.ft R

.IP "\fBpfwrite\fP (pfname, filename)"
Write a file to the named file 
.ft CW
.in 2c
.nf
.ne 3

pfwrite( pfname, filename )

.fi
.in
.ft R

.IP "\fBpf2xml\fP (pfname, flags = 0, prolog = None, name = None)"
Convert a parameter-file to XML
.ft CW
.in 2c
.nf
.ne 3

xml = pf2xml( pfname, PFXML_STRONG )

.fi
.in
.ft R

.IP "\fBstrtime\fP (epoch)"
Returns a string version of an epoch time
.ft CW
.in 2c
.nf
.ne 3

e = 1220912560

s = strtime(e)

.fi
.in
.ft R
.IP "\fBstr2epoch\fP (timestring)"
Returns an epoch time corresponding to a time string, parsable by str2epoch(3)
.ft CW
.in 2c
.nf
.ne 3

s = '1/1/2000 14:00'

e = str2epoch(s)

.fi
.in
.ft R

.IP "\fBepoch2str\fP (epoch, fmt, tz = None)"
Returns a time string corresponding to an epoch time, in format determined by epoch2str(3)
.ft CW
.in 2c
.nf
.ne 3

e = 946735200

f = '%m/%d/%Y %H:%M'

s = epoch2str(e, f)

.fi
.in
.ft R

.IP "\fBepoch\fP (yearday)"
Returns an epoch time corresponding to a yearday value
.ft CW
.in 2c
.nf
.ne 3

yd = 2001001

e = epoch(yd)

.fi
.in
.ft R

.IP "\fByearday\fP (epoch)"
Returns a yearday value corresponding to an epoch time
.ft CW
.in 2c
.nf
.ne 3

e = 946684800

yd = yearday(e)

.fi
.in
.ft R

.IP "\fBnow\fP ()"
Returns the current epoch time
.ft CW
.in 2c
.nf
.ne 3

e = now()

.fi
.in
.ft R

.IP "\fBgrn\fP (lat, lon)"
Returns the geographic region number for the given coordinates
.ft CW
.in 2c
.nf
.ne 3

lat = 65
lon = -150

n = grn(lat, lon)

.fi
.in
.ft R

.IP "\fBsrn\fP (lat, lon)"
Returns the seismic region number for the given coordinates
.ft CW
.in 2c
.nf
.ne 3

lat = 65
lon = -150

n = srn(lat, lon)

.fi
.in
.ft R

.IP "\fBgrname\fP (lat, lon)"
Returns the geographic region name for the given coordinates
.ft CW
.in 2c
.nf
.ne 3

lat = 65
lon = -150

name = grname(lat, lon)

.fi
.in
.ft R

.IP "\fBsrname\fP (lat, lon)"
Returns the seismic region name for the given coordinates
.ft CW
.in 2c
.nf
.ne 3

lat = 65
lon = -150

name = srname(lat, lon)

.fi
.in
.ft R

.IP "\fBelog_init\fP (sys.argv)"
Initialize the Antelope error-logging facility
.ft CW
.in 2c
.nf
.ne 3

elog_init(sys.argv)

.fi
.in
.ft R

.IP "\fBelog_log\fP (msg)"
Put a log message on the Antelope error log, raising an ElogLog exception
.ft CW
.in 2c
.nf
.ne 3

elog_log("Test log message")

.fi
.in
.ft R

.IP "\fBelog_notify\fP (msg)"
Put a notification message on the Antelope error log, raising an ElogNotify exception
.ft CW
.in 2c
.nf
.ne 3

elog_notify("Test notification message")

.fi
.in
.ft R

.IP "\fBelog_complain\fP (msg)"
Put a complaint message on the Antelope error log, raising an ElogComplaint exception
.ft CW
.in 2c
.nf
.ne 3

elog_complain("Test complaint message")

.fi
.in
.ft R

.IP "\fBelog_die\fP (msg)"
Put a fatal message on the Antelope error log, raise an ElogDie exception, and exit
.ft CW
.in 2c
.nf
.ne 3

elog_die("Test fatal message")

.fi
.in
.ft R
.SH "SEE ALSO"
.nf
pythonorb(3y), pythonstock(3y)
.fi
.SH "BUGS AND CAVEATS"
The pf2xml function is not properly a member of the Antelope libstock library, 
though this seems a reasonable place for it in the python wrapper. 
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting, Inc. 
.fi
