.TH CF 1 "$Date$"
.SH NAME
cf \- colorize text based on filters specified in a parameter file
.SH SYNOPSIS
.nf
cf [-c] [-n] [-t] [-g] [-e expressions] [-p pfname] [filename [...]]
.fi
.SH DESCRIPTION
The color-filter program \fBcf\fP is a simple line-based scanner that 
filters text and applies particular colors based on regular-expression 
matches of the contents. The regular expressions used to assign colors 
are specified in an Antelope parameter-file. 

\fBcf\fP takes input either from standard-input, or from one or more files
specified on the command line. 

Internally, \fBcf\fP automatically builds a recursive-descent grammar 
from the contents of the parameter file and uses that to parse the input
text with the Perl Parse::RecDescent module. 

There are two main tables in the \fBcf\fP parameter file. First, an \fIescapes\fP
table lists the names of several display modes (different colors) 
along with the numeric codes for them from the ANSI 6429 specification. Some
useful constants from that specification are shown here:
.nf

    black      30
    red        31
    green      32
    yellow     33
    blue       34
    magenta    35
    cyan       36
    white      37
    normal     00
    brighten   01
    underline  04
    blink      05
    background 07

.fi
In the simplest case, a line in the \fIescapes\fP table will list a 
display mode and the ANSI code that defines it:
.nf

    red        31

.fi
In more sophisticated usage, a line in the \fIescapes\fP table will show
a sequence of codes to use before the matching expression, a colon, 
and a sequence of codes to use after the matching expression (this can 
be used, for example, to highlight the first word of a line and leave the 
rest colored similarly). For example, the following entry will reproduce 
the string matching the regular-expression in bold blue, then reproduce
the rest of the line in normal (i.e. non-bold) blue:
.nf

    blue       34 01 : 00 34

.fi
The second major block of the \fIcf.pf\fP parameter file is an 
\fIexpressions\fP
array,  which gives a set of expressions to be presented in each display mode. 
There may be several such arrays in the parameter file, each named after 
its intended purpose; the -e option allows specification on the command line 
of the one to use. If no -e option is given, the \fIdefault_expressions\fP
parameter names the array of expressions to use. 
See the example below in the PARAMETER FILE section. Each expression should be 
a regular expression understood by Perl. The expressions are sorted into 
tables, one each for each of the display-modes listed in the \fIescapes\fP 
table. For example, if the \fIescapes\fP table has an entry for a 
display mode of \fIred\fP, the \fIexpressions\fP table should contain something 
like this: 
.nf

   red &Tbl{
	^Error:
	^.*undefined symbol:
   }

.fi
This will color red all lines that start with the string \fIError:\fP or 
contain the string \fIundefined symbol:\fP. 

Note that \fBcf\fP automatically returns the display mode to normal 
after each line (in other words, if a line of input text is encountered that 
has no matching expression in the parameter file, that line will be 
displayed normally). 

.SH OPTIONS
.IP "-c"
Emit raw escape codes prefaced with \fIANSICODE_\fP, rather than creating
the actual colorizing escape sequences. This is useful if colorizing needs 
to be done by another application (for example localmake(1)), based on the 
analysis done by \fBcf\fP. 
.IP "-e expressions"
Specify the name of an array of regular expressions to use, which should 
match one of the array names in the parameter file. If this option is 
not specified, the array named by the \fIdefault_expressions\fP 
parameter is used. 
.IP -g
Print the grammar automatically generated from the parameter-file, then 
exit. 
.IP -n
Restore the terminal to normal output in the rare event that the color-filter,
or downstream applications to which its output is piped, leaves everything
in an unusual state. With this option, \fBcf\fP exits immediately without
further processing. 
.IP "-p pfname"
Specify a parameter-file name other than the default \fIcf.pf\fP.
.IP -t
Activate the Parse::RecDescent tracing mechanism to analyze the 
logic of the automatically generated grammar
.SH PARAMETER FILE
The parameter file below shows a simplified version of the default 
parameter file \fIcf.pf\fP. Two tables of expressions are shown, one
of which is constructed to interpret the output 
of compilation with an antelopemakefile(5) and the other of which is 
constructed to interpret Concurrent Version System (CVS) messages. If the 
expressions array to use is not explicitly specified on the command line 
(-e option), the array given in the \fIdefault_expressions\fP parameter 
is used:
.nf

escapes &Tbl{
	red        31 
	green      32 01 07 : 00 32
	blue       34 01 : 00 34
	magenta    35
	cyan       36
}

default_expressions make

make &Arr{
   red &Tbl{
	^Error:
	^.*undefined symbol:
   }
   green &Tbl{
	^\\\\+[[:space:]]+[^[:space:]]+ 
   }
   magenta &Tbl{
	^.*gcc.*: unrecognized option
	^.*declaration hides parameter
	^.*Warning:
   }
   cyan &Tbl{
	^Current working directory
	^In file included from
	^.*In function [`'].*':    
   }
   blue &Tbl{
	^cc[[:space:]]
	^compile[[:space:]]
	^deposit[[:space:]]
	^make[[:space:]]
	^mv[[:space:]]
	^produce[[:space:]]
   }
}

cvs &Arr{
   red &Tbl{		# Problem, needs manual intervention
	^C[[:space:]]
   }
   green &Tbl{		# Notable differences, not necessarily a problem
	^M[[:space:]]
   }
   blue &Tbl{		# Notable changes, results OK
	^P[[:space:]]
	^G[[:space:]]
	^W[[:space:]]
	^A[[:space:]]
	^R[[:space:]]
   }
   magenta &Tbl{	# Alerts, could be problems
	^\\\\?[[:space:]]
	cvs update: warning
	cvs update:.*skipping CVS directory
   }
   cyan &Tbl{		# Standard operations and results
	cvs update: Updating
	^U[[:space:]]
   }
}

.fi
.SH EXAMPLE
.in 2c
.ft CW
.nf
% make install |& cf | less -R

or (in tcsh):

% alias cmake 'make \\!* |& cf'

then

% cmake install

.fi
in a directory with an Antelope Makefile (this should produce a colored
output of the compile process). Alternatively, interpret the output of 
cvs update commands, again using the parameter-file above:
.nf

% cvs update -d -P . | cf -e cvs

.fi

.ft R
.in
.SH "BUGS AND CAVEATS"
\fBcf\fP uses ANSI Color escape codes; the terminal or program used 
to display these must support ANSI (ISO) 6429. 

The less(1) program may need to be run with the -R option ("Raw 
control characters") in order to display colors correctly. 

Backslash characters '\\' for the regular expressions must appear as 
double backslashes '\\\\' in the cf.pf parameter file to protect them 
from misinterpretation by the parameter-file reader. 

The exact performance of the \fBcf\fP utility may depend on the order in which 
expressions appear in the \fIcf.pf\fP parameter file (note the blocks of different 
colors are processed in the order they appear in the \fIescapes\fP table; 
similarly expressions for each color are processed in the order in which they
appear).

Input lines of text are fed one line at a time to the parser, rather 
than en-masse, in order to prevent 
the recursive-descent approach from reading in the entire stream before 
printing anything. This is a slight distortion of the intent of the 
recursive, context sensitive parsing for which Parse::RecDescent was designed, 
however it appears to make a more functional tool for the current task 
(e.g. parsing Antelope Makefile output). The alternatives involve 
bottom-up and precompiled tokenizers and parsers, all of which present
various difficulties. The recursive descent capability is still advantageous
to have supported for future context-sensitive analysis and optional toggling
between line-by-line and en-masse processing.

.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting, Inc. 
.fi
.\" $Id$
