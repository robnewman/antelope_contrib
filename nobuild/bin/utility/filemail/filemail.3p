.TH FILEMAIL 3p "$Date$"
.SH NAME
parse_address, message_to_database, get_epoch, realname \- perl utilities to 
help file mail messages to a Datascope database
.SH SYNOPSIS
.nf

use filemail;

filemail( $in, $archive_dir, @db );

message_to_database( @db, $name, $dir, $dfile,
			$foff, $lines, $bytes, @message );

( $user, $host, $address ) = parse_address( $address );

$epoch = get_epoch( $mailobj );

$real = realname( $address );

@message_ids = parse_message_ids( $line );

$message_id = clean_message_id( $message_id );

$filemail::Verbose = 0;
$filemail::Dryrun = 0;
$filemail::Relpath = 0;
$filemail::Dirmode = "0755";
$filemail::Filemode = "0644";
$filemail::FormatProblems = "FormatProblems";
$filemail::Nullhost = "localhost";
$filemail::Sent_archive_pattern = "%Y/SENT/%B";
$filemail::Schema = "Mail1.3";
@filemail::Me = ();
@filemail::PreserveHosts = ();
%filemail::Subjects = ();

.fi
.SH DESCRIPTION
These routines assist in saving mail messages to a Datascope database 
of mail, currently in Mail1.3 format. 

The filemail routine takes an input message as $in. This may be either 
the name of a file containing a single mail message, or a reference 
to a Mail::Internet object. filemail copies the message to the 
appropriate location under the $archive_dir directory, and records 
the mail message in a Datascope database of schema $filemail::Schema 
to which the @db database pointer should be open with write permission. 
[The variable $filemail::Schema is informational and should not be modified
by the user]. Mail messages 
by default are saved into subdirectories and files as YEAR/domain/sender.
Database entries are made via the message_to_database function into 
the \fIin\fP table of the mail database. If there are problems parsing
the input mail, the message is saved to the $filemail::FormatProblems
file under $archive_dir. If the input message was sent from an address 
matching one of the addresses in the array @filemail::Me, the mail will 
instead be saved under $archive_dir according to the value of 
$filemail::Sent_archive_pattern (all of these module variables may be 
overridden in user code). The domain name for the directory will often 
be a shortened version of the full domain in the email address, unless 
said domain appears in $filemail::PreserveHosts. Finally, if the 
subject of the email matches any of the regular-expression patterns 
given in the keys of %filemail::Subjects, the message will be saved 
to a file named after the corresponding value, rather than after the 
username of the sender. See filemail(1) for an example. 


parse_address splits apart the username, domain name, and fully
qualified email address of an email address from a line in the message
header. If the email address is not fully qualified, the $host output
defaults to $filemail::Nullhost. All characters are
converted to lowercase. The host may be shortened to produce a
convenient version of the domain name for archiving (for example,
converting all .*.ucsd.edu hosts to simply ucsd.edu) unless the host
appears in the @filemail::PreserveHosts array.

The get_epoch function extracts timestamp information out of the mail
headers and returns the unix epoch time for the timestamp on the email.
The input $mailobj value should be a reference to a Mail::Internet(3)
mail message object.

The realname function extracts and returns the 'real name' of the
correspondent from the mail headers.

The message_to_database function takes a database
pointer, a mail message which can be either a reference to a
Mail::Internet object or a perl array representing the message itself,
and records the message as saved in the database with the accompanying
parameters. This routine does not actually save the message itself. The
mail is recorded in the 'in' table of the database unless the sender
appears in the @filemail::Me array in which case it is saved in the 'out' 
table. The $name argument is only used in error messages, and may contain
the source-name of an input file if the message comes from a file. The $dir, $dfile and $foff arguments
specify where the email message was saved. The $lines and $bytes record
the size of the message. These must be exact in order for future
message lookups to succeed.

The parse_message_ids function takes a single line of text (for example,
the contents of the References or In-Reply-To email header lines) and 
returns an array of the message-id strings it finds within the input 
string. 

The clean_message_id function takes a Message-ID as an input string 
and returns a copy that has illegal spaces removed and is stripped of the 
enclosing brackets. 

If the $filemail::Verbose variable is nonzero, verbose messages are
printed.

If the $filemail::Dryrun variable is nonzero, the filemail routine 
only reports what it would do without doing it.

The $filemail::FormatProblems variable specifies the name of a file
to which problem emails are saved. 

The $filemail::Dirmode and $filemail::Filemode variables specify the access 
permissions on directories  and files created by filemail. These 
should be specified as strings containing the octal representations 
of file access permissions, e.g. "0644". For the meaning of the permission
numbers see chmod(2).

The $filemail::Relpath variable specifies whether to attempt to make 
database entries listing relative instead of absolute paths for the 
archival mail files. The default is to use absolute paths. If an absolute 
path appears to long for the dir field of the database, filemail will 
forcibly enter relative-path mode. If the relative paths are still to 
long to fit in the database, the message_to_database routine will 
consider it a fatal error and exit with complaint. 
.SH OPTIONS
.SH FILES
.SH ENVIRONMENT
.SH PARAMETER FILE
.SH EXAMPLE
.in 2c
.ft CW
.nf
% cat try_filemail
: # use perl
eval 'exec perl -S $0 "$@"'
if 0;

use lib "$ENV{ANTELOPE}/data/perl" ;

use Datascope;
use filemail;

elog_init( $0, @ARGV );

$filemail::Verbose++;

$filename = "1089360126-brogers\\@yoyodyne.net";
$archive_dir = "archive";
$dbname = "testdb";
$schema = "Mail1.3";

dbcreate( $dbname, $schema );

@db = dbopen( $dbname, "r+" );

filemail( $filename, $archive_dir, @db );

% 


% ./try_filemail 
Filing 1089360126-brogers@yoyodyne.net in archive/2004/yoyodyne.net/brogers
try_filemail: Adding to database mail from Buck Rogers <brogers@yoyodyne.net>
 at 1089360126: foff 0 lines 42 bytes 1971 /home/kent/tests/filemail_verify/archive/2004/yoyodyne.net brogers
% 
.fi
.ft R
.in
.SH RETURN VALUES
.SH LIBRARY
.SH ATTRIBUTES
.SH DIAGNOSTICS
.SH "SEE ALSO"
.nf
filemail(1), mp_filemail(3), Mail::Internet(3)
.fi
.SH "BUGS AND CAVEATS"
the filemail.pm module sets the Mail::Header->mail_from() to COERCE, 
in order to keep the 'From ' fields from the header and use the contained 
date information if the Date: tag in the email is bad. 
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting, Inc.
.fi
.\" $Id$
