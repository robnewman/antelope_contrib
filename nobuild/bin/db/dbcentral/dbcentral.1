.TH DBCENTRAL 1 "$Date$"
.SH NAME
\fBdbcentral\fP \- centralized utility to launch commands on commonly used databases
.SH SYNOPSIS
.nf
\fBdbcentral\fP [-a] [-n] [-t timestring] [-d] [-D dbname] [-l] [-q queryfile] 
	  [-p pfname] [database_clustername [task_nickname]]
.fi
.SH DESCRIPTION
Many institutions have a variety of databases which are commonly used
by researchers, analysts, lab personnel, field crew etc. These may be
single databases, such as site databases, or groups of databases with
standardized naming conventions (such as databases of earthquakes or
waveforms, which often have some kind of timestamp in their name). Even
for people who know where all of these are, for large enough installations
it can be a nuisance to keep track of them, and repeatedly type in the
full paths for common tasks (such as dbe(1)). Also, for people who do
not spend the majority of their waking hours in the institution's unix
filesystem, such as field personnel or perhaps visiting researchers,
constantly having to refresh their memory on database locations etc. can
slow down work. Dbcentral is intended to solve these problems.

The databases and database-clusters used at a site should be listed 
in a centralized database in the dbcluster0.5 or higher schema. This schema 
allows a \fIclustername\fP to be given to each related set of databases (the 
set may contain only one database for such standard administrative 
entities as site databases etc). Each row of the dbcluster database gives 
the time-range covered by a subset of the databases in that cluster that 
all follow a regular naming convention. The naming convention is given in the 
\fIdir\fP and \fIdfile\fP fields, using percent-escape characters understood 
by the \fIepoch2str\fP(3) command. The \fIclusters.volumes\fP field of the
dbcluster0.5 schema, described in more detail in the schema file itself (and 
therefore with explanation available through dbhelp(1)) is intended to 
support looping over clusters of databases that have regular volume sizes, 
alignments, and names, for example databases segmented by day, week, month, or
year. Rows in the cluster database representing single databases will have 
this field set to \fIsingle\fP. The optional \fInet\fP field in the 
\fIclusters\fP table allows specific sensor network names to be given, 
if a cluster of databases is unique to one particular sensor network. 

A parameter file is set up once for the whole site, usually by system
operators responsible for creating and maintaining all the databases. This
parameter file contains the name of the centralized dbcluster database as 
well as the default tasks which are commonly run on them. This list 
of default tasks for a given database cluster may be overridden in the 
custom_tasks array as shown in the example below.  Each task should have a 
descriptive name for the task, then a unix command-line that will run 
the task. The DBNAME macro in this command-line will be replaced by the 
actual database name when \fBdbcentral\fP runs. 

When \fBdbcentral\fP is launched with no command-line options, it reads this
parameter file and cluster database and creates a GUI with one pull-down menu per
database cluster.
Each pull-down menu contains entries for the commands which may be run
on that cluster. In addition, a time-of-interest field is specified at
the top of the GUI window.  This time is used to interpret
database-name templates which depend on time.  The time-of-interest
field is initialized to be the launch time of the \fBdbcentral\fP program,
determined from the system clock. However, a different time may be
typed in by the user. Hitting 'return' in the entry box after changing
the time will normalize the time-string to the standard print format.
Any time string accepted by str2epoch(3) may be entered.

The dir and dfile fields of the dbcluster database are intended to be a
template for str2epoch(3), which
allows \fBdbcentral\fP to handle entire structures of databases with similar,
time-dependent names. For example, if the analyst-reviewed hypocentral
solutions are in day volumes, such as
.nf

	 /catalog/2002/138/quakes_2002_05_18

.fi
the corresponding database pathname in the cluster database (combining dir
and dfile) might be 
.nf

	/catalog/%Y/%j/quakes_%Y_%m_%d

.fi
The meaning of the percent-escape codes is listed in str2epoch(3). Given
this name template, \fBdbcentral\fP can use one description for the entire
class of databases, interpret the template according to the time of
interest specified in \fBdbcentral\fP, and hunt down the correct database.

The parameter file and supporting database for \fBdbcentral\fP may be useful far
beyond the \fBdbcentral\fP
GUI itself. Properly configured for the installation, 
these can allow automated processes to look up databases they need, rather 
than having them in their own parameter file.  For example, if a particular 
parameter file for some application has the entry
.nf

	site_database /Seis/databases/stations/master_stations

.fi
That may be replaced by a parameter-file execution of \fBdbcentral\fP:
.nf

	site_database &exec(\fBdbcentral\fP -d site_database)

.fi
(assuming, of course, that that site_database has been specified in 
the cluster database!).

If one holds down the middle mouse button over the database clustername, 
the fully resolved pathname (i.e. for the current time specification)
for that database is displayed. 

If one clicks the right mouse button on the database clustername, the 
first listed task is performed on the database. 

A Control-C in the \fBdbcentral\fP GUI window will kill the application. 

In addition to the GUI mode, launched with no arguments, \fBdbcentral\fP has 
a command-line mode for easy retrieval of and command-launches on common 
databases. If one of the database clusternames is specified on the 
command line, the first task listed for that database is launched. A task 
nickname may be specified in addition to the database clustername, in which
case the specified task is launched. The -t option may be used to 
specify a time other than the current time to use in the database name 
template. Finally, the -d option may be used to retrieve absolute 
pathnames, and the -n option may be used to print a list of available database 
clusternames, or available task nicknames for a given database clustername. The -d 
option is useful in scripts and in other parameter files (via the &exec()
mechanism; see pf(3)). This allows common database pathnames to be 
centrally configured.

.SH OPTIONS
.IP -a
The -a option runs a task nickname from the parameter-file on all databases
in a cluster. A database clustername and a task nickname must be specified 
on the command-line when using this option (often the task nickname will
refer to a task defined in a custom parameter file). See the EXAMPLE and 
BUGS AND CAVEATS setions below for additional information. 

.IP -d
Show the absolute pathname of a database. A database clustername must 
be specified when using the -d option.

.IP "-D dbname"
Specify a database name other than the one in the parameter file. 

.IP -l
Show the pathnames of all databases in a cluster. A database clustername must 
be specified when using the -l option.

.IP "-p pfname"
Specify a parameter name other than the default dbcentral.pf

.IP "-q queryfile"
Run a dbprocess(3) style query on all databases in a cluster. The query
file should be a list of dbprocess(3) commands to apply to each database. If 
the queryfile is specified to be '-', these commands are taken from stdin. The 
final command should be a display instruction such as dbselect. If stdin 
is used to deliver the query instructions, an empty line should be used to 
indicate the end of the dbprocess command list. See the example below for a 
demonstration. If the last line or second-to-last line of the query instructions 
begins with \fIdb2pipe\fP, 
each resulting view is piped into the remaining command string after any 
percent-escape strings have been replaced according to the timestamp 
appropriate to the beginning of the database volume. This allows, for example, 
processed results from each database in a cluster to be unpacked and saved 
in derivative databases named by time period. If desired, these derivative 
databases can be further merged in a separate step after the dbcentral query
is completed. If the last line of the query instructions begins with \fIdbmerge\fP, 
the line is used to execute the dbmerge(1) command. Both the db2pipe and 
dbmerge lines may include percent-escapes per epoch2str(3), which will be replaced 
at run-time with values corresponding to the start time of the database being 
processed (see example below). 

.IP -n
Show available database clusternames or task nicknames.

.IP -t
For all operations where dbcentral is operating on a single database out of a
cluster, dbcentral needs to decide which database to use, which it does 
by finding the database in the cluster that contains a given reference time. 
By default, that reference time is the system-clock setting for the current time. 
If desired, an alternate time may be specified with the -t option by passing in 
any string interpretable by the epoch(1) command. A database clustername must be
specified when using the -t option.

.SH FILES
.SH ENVIRONMENT
.SH PARAMETER FILE
.nf

home &env(HOME)
dbcentral_database &home/\fBdbcentral\fP

default_tasks &Tbl{
	dbe		dbe DBNAME
	dbe_editable	dbe -e DBNAME
}

custom_tasks &Arr{
	antelope_demo &Tbl{
		dbe		dbe DBNAME
		dbe_origin	dbe  DBNAME.origin 
		dbpick		xterm -e dbpick -nostarttalk DBNAME
		smartpick 	smartpick -nowait DBNAME
	}
}
.fi
.SH EXAMPLE
.ft CW
.in 2c

.SS "To create a demo cluster database:"

.nf

% cat > ~/\fBdbcentral\fP
#
schema dbcluster0.5
%
% dbaddv ~/\fBdbcentral\fP.clusters <<EOF
? clustername antelope_demo
? time 4/27/92
? dir /opt/antelope/data/db/demo
? dfile demo
? net KNET
? volumes single
? schema css3.0
? % 

.fi

.SS "To launch the GUI application:"

.nf


% \fBdbcentral\fP
% 

.fi

.SS "To launch dbe on the demo database, given the above parameter file:"

.nf

% \fBdbcentral\fP antelope_demo

.fi

.SS "To launch dbpick on the demo database, given the above parameter file:"

.nf

% \fBdbcentral\fP antelope_demo dbpick

.fi

.SS "To get the absolute pathname of the demo database:"

.nf

% \fBdbcentral\fP -d antelope_demo
/opt/antelope/data/db/demo/demo

.fi

.SS "To get the currently-configured database clusternames:"

.nf

% \fBdbcentral\fP -n

dbcentral database clusternames:


        antelope_demo

.fi

.SS "To get the currently configured task nicknames for the demo database:"

.nf

% \fBdbcentral\fP -n antelope_demo

dbcentral command nicknames for antelope_demo:


        dbe

        dbe_origin

        dbpick

        smartpick

.fi

.SS "To get the pathname for PDE database containing data for Dec. 31, 1997, provided such a cluster is specified in the cluster database:"

.nf

% \fBdbcentral\fP -t "12/31/97" -d pde

/space/pde/pde_1997

% 

.fi

.SS "To list the names of all the pde databases that exist on the system, as specified in the given cluster:" 

.nf

% \fBdbcentral\fP -l pde
/space/pde/pde_pre1960
/space/pde/pde_1960
/space/pde/pde_1961
/space/pde/pde_1962
/space/pde/pde_1963
/space/pde/pde_1964
/space/pde/pde_1965
/space/pde/pde_1966
/space/pde/pde_1967
/space/pde/pde_1968
/space/pde/pde_1969
/space/pde/pde_1970
/space/pde/pde_1971
/space/pde/pde_1972
/space/pde/pde_1973
/space/pde/pde_1974
/space/pde/pde_1975
/space/pde/pde_1976
/space/pde/pde_1977
/space/pde/pde_1978
/space/pde/pde_1979
/space/pde/pde_1980
/space/pde/pde_1981
/space/pde/pde_1982
/space/pde/pde_1983
/space/pde/pde_1984
/space/pde/pde_1985
/space/pde/pde_1986
/space/pde/pde_1987
/space/pde/pde_1988
/space/pde/pde_1989
/space/pde/pde_1990
/space/pde/pde_1991
/space/pde/pde_1992
/space/pde/pde_1993
/space/pde/pde_1994
/space/pde/pde_1995
/space/pde/pde_1996
/space/pde/pde_1997
/space/pde/pde_1998
/space/pde/pde_1999
/space/pde/pde_2000
% 

.fi

.SS "To run a cross-database query by entering dbprocess(3) commands from the command line:"

.nf

% \fBdbcentral\fP -q - pde
dbopen origin
dbsubset ml > 7
dbselect lat lon depth strtime(time) ml

  65.4000 -150.1000    7.0000 10/29/1968  22:16:15.600    7.10
 -38.1830  -73.2320    6.0000  5/10/1975  14:27:38.700    7.50
  35.9970  -17.6490   33.0000  5/26/1975   9:11:51.500    8.10
 -29.2080 -177.8860   69.0000  1/14/1976  15:56:34.900    7.80
 -28.4270 -177.6570   33.0000  1/14/1976  16:47:33.500    8.20
  39.5700  117.9780   23.0000  7/27/1976  19:42:54.600    7.60
  58.6790 -142.7860   10.0000 11/30/1987  19:23:19.500    7.10
  56.9530 -143.0320   10.0000  3/06/1988  22:35:38.100    7.40
  43.3000  143.6910  102.0000  1/15/1993  11:06:05.900    7.50
 -10.9720  164.1810   20.0000  3/06/1993   3:05:49.800    7.10
  51.2180  157.8290   71.0000  6/08/1993  13:03:36.400    7.10
  42.8510  139.1970   17.0000  7/12/1993  13:17:11.900    7.70
  12.9820  144.8010   59.0000  8/08/1993   8:34:24.900    7.80
  14.7170  -92.6450   34.0000  9/10/1993  19:12:54.600    7.20
 -18.0390 -178.4130  563.0000  3/09/1994  23:28:06.700    7.50
 -10.4770  112.8350   18.0000  6/02/1994  18:17:34.000    7.80
 -13.8410  -67.5530  631.0000  6/09/1994   0:33:16.200    8.20
 -16.6200  167.5180   33.0000  7/13/1994   2:35:56.000    7.20
  42.3400  132.8650  471.0000  7/21/1994  18:36:31.700    7.30
  43.7730  147.3210   14.0000 10/04/1994  13:22:55.800    8.30
  43.9050  147.9160   33.0000 10/09/1994   7:55:39.500    7.30
  13.5250  121.0670   32.0000 11/14/1994  19:15:30.600    7.10
  40.5250  143.4190   27.0000 12/28/1994  12:19:23.000    7.80
 -37.7590  178.7520   21.0000  2/05/1995  22:51:05.100    7.10
 -15.1990 -173.5290   21.0000  4/07/1995  22:06:56.800    7.40
  12.0590  125.5800   21.0000  4/21/1995   0:34:46.000    7.10
  12.6260  125.2970   16.0000  5/05/1995   3:53:45.000    7.10
 -23.0080  169.9000   20.0000  5/16/1995  20:12:44.200    7.70
  52.6290  142.8270   11.0000  5/27/1995  13:03:52.600    7.10
 -23.3400  -70.2940   46.0000  7/30/1995   5:11:23.600    7.60
  -5.7990  154.1780   30.0000  8/16/1995  10:27:28.600    7.70
  16.7790  -98.5970   23.0000  9/14/1995  14:04:31.400    7.20
  19.0550 -104.2050   33.0000 10/09/1995  15:35:53.900    7.30
  28.8260   34.7990   10.0000 11/22/1995   4:15:11.900    7.20
  44.6630  149.3000   33.0000 12/03/1995  18:01:08.900    7.40
  -6.9030  129.1510  142.0000 12/25/1995   4:43:24.400    7.10
  34.5940 -116.2710    0.0000 10/16/1999   9:46:44.130    7.30
% 

.fi

.SS "To apply some database operations to a set of databases in a cluster, then save the results in new databases, the following example should help. In this example we are responding to a request to update arrival data for some tomography plots:"

.nf

% cat myrequest
dbopen event
dbjoin origin
dbsubset prefor==orid
dbsubset time>=_2007046_
dbsubset distance(lat,lon,49,-125)>30
dbsubset distance(lat,lon,32,-115)>30
dbjoin assoc
dbjoin arrival
db2pipe dbunjoin -o mydb_%Y_%m_%d - 
%

% \fBdbcentral\fP -q myrequest usarray 
% 

% ls 
mydb_2007_02_01           mydb_2007_03_01.arrival   mydb_2007_04_01.assoc
mydb_2007_02_01.arrival   mydb_2007_03_01.assoc     mydb_2007_04_01.event
mydb_2007_02_01.assoc     mydb_2007_03_01.event     mydb_2007_04_01.origin
mydb_2007_02_01.event     mydb_2007_03_01.origin    myrequest
mydb_2007_02_01.origin    mydb_2007_04_01           
mydb_2007_03_01           mydb_2007_04_01.arrival 
%

.fi

(one could use dbmerge(1) on these results to combine them into one single
output database). 

.SS "To apply operations to all databases in a cluster, then save to new databases, then merge automatically, the dbmerge feature may be used:"

.nf

% cat myrequest 
dbopen origin
dbsubset lon > -126 && lon < -123
dbsubset lat > 40 && lat < 48
db2pipe dbunjoin -o /scr/day/temp/tempdb_%Y_%m -
dbmerge /scr/day/temp/tempdb_%Y_%m megathrust
% 

raptor% dbcentral -q myrequest pde
executing dbunjoin -o /scr/day/temp/tempdb_1661_02 - < /tmp/dbcentral_51098_0
executing dbmerge /scr/day/temp/tempdb_1661_02 megathrust

passed all checks, starting to append

        starting to append origin

dbmerge  - completed   6/13/2008 (165) 20:33:55.000 UTC

executing dbunjoin -o /scr/day/temp/tempdb_1960_01 - < /tmp/dbcentral_51098_1
executing dbmerge /scr/day/temp/tempdb_1960_01 megathrust

passed all checks, starting to append

 ........
 ........

executing dbunjoin -o /scr/day/temp/tempdb_2000_01 - < /tmp/dbcentral_51098_41
executing dbmerge /scr/day/temp/tempdb_2000_01 megathrust

passed all checks, starting to append

        starting to append origin

dbmerge  - completed   6/13/2008 (165) 20:34:02.000 UTC

%


% ls megathrust.origin 
megathrust.origin
% 

.fi

.SS "To run an arbitrary task on all databases in a cluster:"

.nf

% cat dbcentral.pf
dbcentral_database /databases/dbcentral

custom_tasks &Arr{

   usarray &Tbl{
	 get_archive_srb get_archive_srb -v -w \\\\"jdate == _2004104_\\\\"  DBNAME srb_2004_04 
	    }

}
%

% dbcentral -a usarray get_archive_srb
 ....
 ....
%


.fi

.in
.ft R
.SH RETURN VALUES
.SH LIBRARY
.SH ATTRIBUTES
.SH DIAGNOSTICS
.nf
% \fBdbcentral\fP fake_clustername

\fBdbcentral\fP: No tasks defined for database 'fake_clustername'

% \fBdbcentral\fP antelope_demo fake_task

\fBdbcentral\fP: No task 'fake_task' defined for database 'antelope_demo'

.fi
.SH "SEE ALSO"
.nf
dbe(1), epoch(1)
.fi
.SH "BUGS AND CAVEATS"
The task-nickname mechanism (based on the parameter file)  and the 
dbprocess-query mechanism (based on the command line) are completely 
different and not interchangeable. Don't try to use them in the 
same ways or at the same time. 

The -a option is not compatible with the -q option. Note that when the 
-a option is used to run an arbitrary command on all databases in a cluster, 
each run proceeds to completion before the next is allowed to finish (i.e. 
the tasks are not run in the background). This may or may not be what 
is desired. If the tasks on all databases are to be run at once (for example,  
if you want to launch a dbe instance on every database in the cluster) then
an \fI&\fP character should be put in the parameter-file explicitly 
after the specification of the command. The number of possible commands 
and configurations that could be run on an entire cluster of databases 
is extremely varied; it would be very hard to support them all in full 
generality. If something more complex is needed than mere specification of 
each database name on the command line to run (this could include the job
of rejecting entire databases from the processing based on some criterion), 
then a small script or application should be written and named under the 
dbcentral.pf parameter file: 

.nf

% cat dbcentral.pf
dbcentral_database /databases/dbcentral

custom_tasks &Arr{

   pde &Tbl{
         complextask     myscript DBNAME
   }

}

% dbcentral -a pde complextask
 ....
 ....
%

.fi

The task-names in the parameter file may not contain spaces or other 
strange characters (see pf(5), even if quoted). This allows a simple
implementation in which the GUI menu items come up in the same order
as they are listed in the parameter file. Spaces may be used in 
a database clustername, providing the entire clustername is quoted.

Note that if double-quotes appear in the task command-lines in the 
parameter file, they should be escaped with double backslashes (as shown 
in the EXAMPLE section above).

Dbcentral does not check, after constructing a database name from the 
parameter-file template and the time specified in the GUI, whether 
the database actually exists or has any tables. The command of interest 
is blindly run on the pathname created. This is possibly a mistake. However,
because of the general nature of \fBdbcentral\fP, the templates and commands 
could just as easily be used for database creation as for running commands 
on pre-existing databases. Thus, no checking is done. One could always add
an existence check as one of the parameter-file entries.

\fBdbcentral\fP does not check to see whether the command succeeded.

One could arguably hard-wire \fBdbcentral\fP to always include a dbe(1) 
line for each database. Instead, this is left at the discretion of the
administrator. This allows the administrator to choose whether dbe 
comes up by default in editable mode ("-e" option to dbe).

If the -l mode is used to list database names and a cluster row with 
the \fIvolumes\fP field specified as \fIsingle\fP has \fIdir\fP and 
\fIdfile\fP with percent-escape characters, the time substitution will be 
silently ignored since the appropriate timestamp to use is ill-defined. 
Also, week-volumes have not been implemented, only day, month, year, and single
volumes. 

The database-existence check for the -l option is a simple check for the 
existence of a file named for the descriptor, or a glob of $dbname.*. This 
could go wrong if there are pathologically named non-database files in the 
target locations. 

The database-path option -d applies the time-string to the database cluster 
names. The time string defaults to the current time if none is otherwise specified 
with -t. If no database in the cluster explicitly covers the time value in 
question, \fBdbcentral\fP by design will return an empty string.

The -D specification of an alternate database name is highly questionable since 
the parameter-file customizations are supposed to be tied so closely to the 
nicknames in a given database. Nevertheless there may be some applications for 
command-line specification of the database name, if it uses default_tasks or 
if several dbcentral databases intentionally use some of the same cluster 
nicknames. 

The \fBdbcentral\fP -q mode needs an ability to subset for time, i.e. for 
only certain databases in a cluster.

The ability of \fBdbcentral\fP to pipe results of cross-database queries to 
arbitrary unix commands appears to be hampered by problems with interpretation 
of the saved views used in an intermediate step. This issue is being investigated.

The \fIdbmerge\fP capability presumes the component databases will not conflict. Also, 
the command-line for dbquery in the queryfile has to be constructed to match the 
db2pipe command arguments, i.e. if db2pipe is used to create a bunch of temporary 
databases, the same temporary names should be given to dbmerge (under normal usage). 
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting, Inc.
.fi
.\" $Id$
