.TH GURALP2ORB 1 "$Date$"
.SH NAME
guralp2orb \- Import Guralp data into an Antelope orb
.SH SYNOPSIS
.nf
guralp2orb [-v] [-V] [-p parameter_file] [-d calibdb]
		[-l file_for_logpackets] orbname 
.fi
.SH DESCRIPTION
guralp2orb receives seismic data packets from Guralp digitizers, via
the SCREAM program from Guralp Inc., and puts them onto an Antelope
orb. The data are preserved in native GCF format, although several
additional pieces of information (segtype, calib, and calper; see
below) are added during encapsulation. Waveform packets are placed on
the orb with the suffix GCF. Datalogger log packets are given the
suffix GCFS. Log packets will also be written to standard error when
guralp2orb is in verbose mode. Log packets will be written to a
log file if one is specified with the -l option.

guralp2orb will optionally reject packets which are too far into the
future, judged by the system clock. This is specified by the 
reject_future_packets_sec entry in the parameter file,
which needs to be told how many seconds constitutes "too far in
the future." A value of zero disables this feature. Similarly guralp2orb
will optionally discard packets too far in the past (e.g. perhaps set 
this to one week). 

guralp2orb has two main modes. In the first, udplisten, guralp2orb
listens on one or more specified UDP ports. In this case it expects
that remote instances of SCREAM will initiate dataflow. In the second
mode, udpinitiate, guralp2orb sends requests to remote instances of
SCREAM, asking that they start sending data via UDP.  This presumes
that the remote instance of SCREAM is configured to listen to network
requests on a certain port, known in advance and listed in the
guralp2orb parameter file. The udpinitiate mode specifies the port for
UDP packet reception. It is not necessary to specify this port in the
udplisten table of the parameter file; guralp2orb will coordinate the
listener threads on its own, launching whatever listeners are
necessary. Both the udplisten and udpinitiate modes may be used at the
same time (although presumably for different stations! Using both modes 
at the same time for the same station will cause double copies of the data to be 
transmitted). Threads will be launched for all connections specified in
both tables. The udplisten and udpinitiate tables in the parameter file
do not both need to be specified. However, if no connections at all are
listed, guralp2orb has nothing to do and exits.

guralp2orb supports the TCP-based packet recovery mechanism to fill
gaps in the data caused by UDP packet loss. guralp2orb tracks the
sequence numbers of packets from multiple instances of scream, noticing
gaps and requesting that they be filled. Each TCP-recovery thread can
handle only one recovery at a time (recovering a contiguous range of
packet sequence numbers from a single instance of SCREAM), however the
user may specify multiple recovery threads with the nrecovery_threads
parameter in the parameter file. The TCP recovery mechanism will detect
hung connections and remain intact (though the block of packets being
processed during the hang may be lost). The TCP recovery mechanism may
be shut off by setting nrecovery_threads to 0. The TCP recovery mechanism 
may also be throttled to prevent too many retries. The max_recovery_failures
parameter limits the number of times TCP recovery may fail for a given SCREAM 
connection. If this limit is exceeded, a warning message is printed and 
TCP recovery is disabled for that IP address. The max_recovery_failures 
parameter may be set to zero, allowing an infinite number of retries.
Guralp2orb will keep re-trying to acquire as long as it has some indication
there's a GCF server on the other end.

Experience with running this program led to a series of modifications.
The fundamental problem is the Guralp packets lack any integrity check
and UDP does not guarantee packets are delivered clean.  As a result
packets were found to sometimes contain random errors that caused a 
series of potential errors.  As a workaround the program contains several
sanity checks described below in the parameter file description.  These
check for the time stamp on packets and for garbage packet sequence numbers.
To further reduce the impact of these problems the program will ONLY 
initiate recovery attempts on trusted hosts named in the parameter file
with the identifying tag recovery_host_list.  That is, recovery is ONLY 
on for hosts whose ip:port address match an entry in that list.

If the udplisten threads are missing UDP packets, it may be necessary to 
set them to real-time priority class. This is done by making the 
guralp2orb executable be suid root (if guralp2orb detects that it 
is suid root, it will automatically promote the UDP listen threads 
to real-time priority scheduling). To make guralp2orb suid root 
one must, as root, execute
.nf

	# chown root guralp2orb
	# chmod 4755 guralp2orb

.fi
Also one has to make sure the disk partition containing the executable allows 
suid to root (consult your system administrator). 

guralp2orb starts the construction of the packet sourcename from the
sysid, streamid, and specified default network. [If the default_net
parameter is not present in the parameter file, guralp2orb uses "-"].
Guralp2orb then morphs this sourcename according to the regular
expressions in the srcname_morph table of the parameter file, as
explained by morphtbl(3). These can be simple, one-to-one mappings,
like
.nf

	somenet_somesysid_somestreamid 	  net_sta_chan

.fi
or they can be more complex regular expressions. In the latter case, 
the first element specifies the regular-expression 
to be used in mapping, and the second element specifies the replacement string. 
Entries in the regular expression that are surrounded by parentheses may
be inserted into the replacement string as $1, $2, etc. See morphtbl(3) and
regex(5) for more information on string replacement and regular expressions.

If this is too confusing, the rule of thumb is as follows: take the source-name 
that is showing up in the orb for your new station. Then decide what you want 
it to be. Put in an entry that expresses that mapping. For example, if your station 
is showing up as PN_0PPPCC_7055Z4 but you really want it to be PN_PPPCC_BHZ, 
use an entry that says 

.nf
	/PN_0PPPCC_7055Z4/PN_PPPCC_BHZ/
.fi

More complex examples are available in the parameter file shown below.

The segtype field inserted into the packets may be controlled through the parameter 
file. By default, the segtype is NULL, i.e. "-". This default may be changed with the
default_segtype parameter in the parameter file. A common setting is 
.nf
	default_segtype V
.fi

If a database is specified with the -d option, the calib, calper, and segtype 
values for the packets are taken out of the database. 

guralp2orb will watch its parameter file, rereading it and dynamically reconfiguring
as necessary. This includes changes to the default_segtype, default_net, and 
srcname_morph table. Also, if more recovery threads are specified, or if new 
udplisten or udpinitiate connections are specified, they will be launched. 
.SH OPTIONS
.IP -v
verbose

.IP -V 
very verbose. Lists information on every incoming packet. Used for 
debugging, not for normal continuous operation.

.IP "-p parameter_file"
Specify alternate parameter file (default is guralp2orb.pf)

.IP "-d calibdb" 
Specify database for calib,calper,segtype information

.IP "-l file_for_logpackets"
Write log packets to the specified log file

.IP "-r reject_sec" 
Reject packets which start more than the specified number
of seconds into the future. Status packets are never rejected, since 
they might be useful in debugging the cause of the incorrect timestamps. 
.SH FILES
.SH ENVIRONMENT
.SH PARAMETER FILE
Here is an example parameter file with comments describing each 
parameter:
.nf

# number of tcp recovery threads. 0 to disable TCP recovery: 
nrecovery_threads 3 

# Maximum allowed number of successive recovery-attempt failures
# for a given SCREAM instance. Set to 0 to disable. 
# recommended to leave this disabled unless necessary.
max_recovery_failures 0 

# Reject packets too far ahead of the system clock. Set to
# 0 to disable future-packet rejection
reject_future_packets_sec 300

# Reject packets too far behind of the system clock. Set to
# 0 to disable past-packet rejection
reject_past_packets_sec 604800	# i.e. 7 days
# absolute number of packets for one recovery request
maximum_packets_to_recover 30
#
#  list of ip:port numbers.  Secondary string (here on) does nothing. 
recovery_host_list &Arr{
137.229.32.243:1567 on
129.79.146.66:1568 on
}

# buffer_tail_padding is the number of packets to advance 
# from the end of the SCREAM buffer, should we need to 
# recover packets that span before the oldest packet in 
# the SCREAM buffer. If set to low, the TCP recovery 
# will thrash, continually 'just missing' the oldest 
# packets in the buffer. If set too high, of course,
# one will miss out on potentially recoverable data.
# The appropriate setting will be affected by data flow
# rate into the scream server, quality of the internet 
# connection, and loading of the machine running guralp2orb. 
# That said, one can probably leave this as is. 
buffer_tail_padding 20

default_net -       
default_segtype V
udplisten &Tbl{
        4567
        53764
        53765
}
udpinitiate &Tbl{ # initiate connections to these SCREAM servers
#       SCREAM_IP:NETWORK_PORT   UDP_LISTENING_PORT
       137.229.32.243:1567 10001
}

# Apply these regular expression substitutions to source-names constructed 
# from default net, srcid, and streamid:
srcname_morph &Tbl{
-_SPSHE2_XXH6EY                                                  PP_MCLA_BHZ
-_SKGA00                                                         PP_SKGA
-_UNV000                                                         AK_UNV
-_(NHSA|SBEA|PPSA|PHSA|GCSA)                                     PP_$1
-_(DIV|SPIA|MCK|BMR|THY|SAW|SWD|JIS|AUL|TNA|RC01|FIB)            AK_$1
(SWD|AUL|MCK|TNA|UNV|SPIA|RC01|FIB|SAW|GCSA|THY|JIS)_BH([ZNE])2  $1_BH$2
(SWD|AUL|MCK|TNA|UNV|SPIA)_BH([ZNE])3                            $1_HH$2
(BMR|DIV)_BH([ZNE])4                                             $1_BH$2
(BMR|DIV)_BH([ZNE])5                                             $1_HH$2
(NHSA|SBEA|PPSA)_BHZ4                                            $1_BHZ
}
.fi

.SH EXAMPLE
.ft CW
.in 2c
.nf
.fi
.in
.ft R
.SH RETURN VALUES
.SH LIBRARY
.SH DIAGNOSTICS
.SH "SEE ALSO"
.nf
orbserver(1), morphtbl(3)
.fi
.SH "BUGS AND CAVEATS"
The future-packet rejection has been moved from the command-line
into the parameter file. past-packet rejection has also been 
added. The assumption is that if the timestamp is that far off, 
the packet has been corrupted in transit, thus it is rerequested.
This can cause a mild (i.e. fairly harmless) loop if the source-packet
actually is that far off the system clock, in which case 
one needs to either set the system clock, fix the source timestamping 
problem, or turn off these filters.

The file of log packets grows indefinitely, unless cleaned out 
by hand or other process. Since guralp2orb opens and closes the log 
file on reception of each status packet, it is probably reasonably 
safe to clean the file up while guralp2orb is running.

guralp2orb relies on the ability of the packet library to decompress
GCF format. Thus, one must have a current version of packets.pf and 
mk_libpkt.pf, with an up-to-date libPkt.so constructed from them. 

guralp2orb will watch the calibration, sensor, and instrument tables of
the optional calibration database, updating values as necessary.
However, guralp2orb is sensitive to the treatment of these database
files. If one of those tables is not present at startup, it will never
be used.  If guralp2orb fails to do a stat of one of the tables while
running, it will quit using the file. Also, once the database is
opened, guralp2orb grabs onto each filename and watches that file for
changes. If another base-table of the same name supercedes the first
due to a change in dbdescriptor, the change will not be honored without
restarting guralp2orb.

guralp2orb dynamically launches new connect threads and recovery threads
when they are added to the parameter file. However, if the nrecovery_threads 
parameter is reduced or if udplisten or udpinitiate connections are removed 
from the parameter file, the corresponding threads are not killed. 

In principle it would be possible for guralp2orb to save state information, which 
would allow it to recover packets that were missed during short stops and restarts. 

SCREAM will actually announce when it is shutting down services. It 
might be nice to catch this and record it in the log file. 

The next stage in the development of guralp2orb will be to allow it to communicate 
directly with Guralp dataloggers, without an intervening instance of SCREAM. The 
threading structure in principle supports this, however it will require extensive 
work.  After that, the next thing to add would be direct command and control.

The new packet format released with SCREAM4.0 is not supported. Use the 
backwards-compatibility mode of SCREAM4.0 to produce original-style packets.
This may be addressed in future versions. Also, it would be advantageous 
for SCREAM (from Guralp, Inc.) to add a checksum to the UDP packets in any
future updates. 
.SH AUTHOR
.nf
Kent Lindquist
Geophysical Institute
University of Alaska
(now at Lindquist Consulting, kent@lindquistconsulting.com)
.fi
.\" $Id$
