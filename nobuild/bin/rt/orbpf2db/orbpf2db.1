.TH ORBPF2DB 1 "$Date$"
.SH NAME
orbpf2db \- generic transfer of parameter-files to database
.SH SYNOPSIS
.nf
\fBorbpf2db \fP [-vV] [-p \fIpffile\fP] [-s \fIstatefile\fP] [-m \fImatch\fP] 
		[-f \fIfrom\fP] [-w \fImode\fP] \fIorb\fP \fIdbname\fP
.fi
.SH DESCRIPTION
\fBorbpf2db\fP is a generic utility to map parameter-files on an \fIorb\fP into a
database \fIdbname\fP of an arbitrary schema. The program presumes some stability in
the format of a given type of parameter file. The database should be in
the correct schema for the parameter-files chosen with the '\fImatch\fP'
option.  The translation from parameter-file keys to database fields is
specified in the parameter file for the \fBorbpf2db\fP program (this
parameter file is called \fBorbpf2db\fP.pf by default). See below for an
example.

The parameter file consists of a translation array called
"translations". Each key in this array is a \fImatch\fP expression for the
\fIorb\fP source-names of the input packets. For a given incoming packet, the
first entry matching the srcname of the packet is used.  The values of
this array specify translation instructions via nested arrays. In the
outermost layer is an array with a 'schema' entry giving the target
database schema, a 'tables' entry giving the database tables to create,
and a 'clean' entry giving tables to clean. Each entry of the 'tables'
array has a key for the database table name, with a value giving an
array of translations. These translations are again key-value pairs:
the key is the name of a database field in the given table; the value
is an expression to give to the pfget(3) routine for the unstuffed
parameter-file \fIorb\fP packet. Several special values are allowed for these
key-value pairs. If a value expression is preceded by the string
 'TIME:', the value is assumed to be the output of the pfput_time(3)
function. In this case the first element (epoch time) is taken from the
string and used as a double-precision epoch time. If the key 'FOREACH'
appears, the value is assumed to be an array of entities which will
create one database row per entry. In this case a foreach loop will be
wrapped around the array of entities, and the string 'FOREACH' in the
value expressions will be replaced by the key on each iteration. If the
 'FOREACH' string appears alone as a value, it will be replaced by the
current key. If the value expression is preceded by the string 'BOOLEAN:', 
the entry is interpreted as a boolean value. If the value expression is 'SRCNAME', 
the value will be the srcname of the packet rather than part of the packet
contents.

Each entry in the 'clean' array specifies fields to \fImatch\fP to the
incoming packet. Upon acquisition of each packet, rows matching all of
the fields specified in the 'clean' array will be deleted before new
rows are added.

The 'version' array in the parameter file allows optional specification 
of a minimum packet version to consider. If the version array is 
omitted or if the version_field element is blank, no filtering is 
applied. Otherwise version{version_field} specifies a field name in the 
incoming packets which must be greater than or equal to the value 
of version{version_min} in order to be processed. 

.SH OPTIONS
.IP "-v"
verbose

.IP "-V" 
Very Verbose

.IP "-p pffile"
This specifies an alternate parameter-file name. The default is \fBorbpf2db\fP.pf

.IP "-s statefile"
This specifies a filename in which to save the state of the program (current \fIorb\fP position).

.IP "-m match"
This specifies a regular-expression with which to select \fIorb\fP packets.
The default is '.*/pf/.*".

.IP "-f from"
This specifies the starting packet for acquisition. Options are
"newest", "oldest", or a string time specification parsable by str2epoch(3).

.IP "-w mode"
This specifies the write \fImode\fP for the program, either "add" or "overwrite".
The default \fImode\fP is "overwrite". In "add" \fImode\fP, \fBorbpf2db\fP adds new
parameter-file rows to the database regardless of existing contents. In "overwrite"
\fImode\fP, a search based on primary keys is performed for matching rows. If a row
already exists, it is overwritten with the new values.
.SH PARAMETER FILE
.in 2c
.ft CW
.nf

translations &Arr{
	/pf/orbstat &Arr{
		schema	registry1.2
		version &Arr{
			version_field	pforbstat_version
			version_min	2.0
		}
		clean &Arr{
			clients &Arr{
				serveraddress	server{address}
				serverport	server{port}
			}
		}
		tables &Arr{
			servers &Arr{
				serveraddress 	server{address}
				closes 		server{closes}
				printconn 	BOOLEAN:server{connections}
				errors 		server{errors}
				host 		server{host}
				maxdata 	server{maxdata}
				maxpkts 	server{maxpkts}
				maxsrc 		server{maxsrc}
				messages 	BOOLEAN:server{messages}
				nclients 	server{nclients}
				nsources 	server{nsources}
				opens 		server{opens}
				orb_start 	TIME:server{orb_start}
				orbversion 	server{orbversion}
				pid 		server{pid}
				serverport	server{port}
				rejected 	server{rejected}
				started 	TIME:server{started}
				version 	server{version}
				statmachine	orbstat_machine
				when 		TIME:server{when}
				who 		server{who}
			}
			clients &Arr{
				FOREACH		clients
				when		TIME:client_when
				serveraddress	server{address}
				serverport	server{port}
				thread		clients{FOREACH}{thread}
				clientaddress	clients{FOREACH}{address}
				clientport	clients{FOREACH}{port}
				clientid	clients{FOREACH}{clientid}
				bytes		clients{FOREACH}{bytes}
				errors		clients{FOREACH}{errors}
				fd		clients{FOREACH}{fd}
				host		clients{FOREACH}{host}
				lastpkt		TIME:clients{FOREACH}{lastpkt}
				lastrequest	clients{FOREACH}{lastrequest}
				latency_sec	clients{FOREACH}{latency_sec}
				mymessages	clients{FOREACH}{mymessages}
				nreads		clients{FOREACH}{nreads}
				nreject		clients{FOREACH}{nreject}
				nrequests	clients{FOREACH}{nrequests}
				nselect		clients{FOREACH}{nselect}
				nwrites		clients{FOREACH}{nwrites}
				packets		clients{FOREACH}{packets}
				perm		clients{FOREACH}{perm}
				pid		clients{FOREACH}{pid}
				pktid		clients{FOREACH}{pktid}
				priority	clients{FOREACH}{priority}
				read		clients{FOREACH}{read}
				reject		clients{FOREACH}{reject}
				select		clients{FOREACH}{select}
				started		TIME:clients{FOREACH}{started}
				what		clients{FOREACH}{what}
				who		clients{FOREACH}{who}
				written		clients{FOREACH}{written}
				statmachine	orbstat_machine
			}
			sources &Arr{
				FOREACH 	sources
				when		TIME:client_when
				serveraddress	server{address}
				serverport	server{port}
				srcname		FOREACH
				when		TIME:source_when
				active		BOOLEAN:sources{FOREACH}{active}
				kbaud		sources{FOREACH}{kbaud}
				latency_sec	sources{FOREACH}{latency_sec}
				nbytes		sources{FOREACH}{nbytes}
				npkts		sources{FOREACH}{npkts}
				slatest		sources{FOREACH}{slatest}
				slatest_time	TIME:sources{FOREACH}{slatest_time}
				soldest		sources{FOREACH}{soldest}
				soldest_time	TIME:sources{FOREACH}{soldest_time}
			}
			connections &Arr{
				FOREACH		connections
				when 		TIME:connections_when
				fromaddress	connections[FOREACH]{fromaddress}
				fromport	connections[FOREACH]{fromport}
				toaddress	connections[FOREACH]{toaddress}
				toport		connections[FOREACH]{toport}
				closeorb	connections[FOREACH]{closeorb}
				statmachine	orbstat_machine
				o2omachine	connections[FOREACH]{o2omachine}
				clientid	connections[FOREACH]{clientid}
			}
			databases &Arr{
				FOREACH		databases
				when 		TIME:databases_when
				serveraddress	databases[FOREACH]{serveraddress}
				serverport	databases[FOREACH]{serverport}
				dbprogram	databases[FOREACH]{dbprogram}
				dbmachine	databases[FOREACH]{dbmachine}
				dir		databases[FOREACH]{dir}
				dfile		databases[FOREACH]{dfile}
				clientid	databases[FOREACH]{clientid}
			}
		}
	}
}
.fi
.ft R
.in
.SH EXAMPLE
.in 2c
.ft CW
.nf

%\fB orbpf2db -s state/orbpf2db mercali.ucsd.edu db/orbregistry\fP

.fi
.ft R
.in
.SH "SEE ALSO"
.nf
pforbstat(1)
.fi
.SH "BUGS AND CAVEATS"
The row deletions from cleanup may invalidate views held by other
programs.
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting
.fi
.\" $Id$
