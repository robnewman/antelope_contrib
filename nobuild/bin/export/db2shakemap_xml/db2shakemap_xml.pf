dbname 			db/reno
earthquake_dtd 		/opt/ShakeMap/lib/xml/earthquake.dtd
wfdata_dtd 		/opt/ShakeMap/lib/xml/stationlist.dtd
output_dir 		/opt/ShakeMap/data/$event_id/input
earthquake_filename 	event.xml
wfdata_filename		db_dat.xml
places_dbname 		/ymp13/ANTELOPE/RENO/places/new_nevada

origin_subset		ml >= 3

insttype		UNR
commtype		DIG

containing_polygon &Tbl{
# Uncomment this polygon or add your own to limit the region of interest
# 	42,-120
# 	42,-114
# 	35,-114
#	39,-120
}

meastype_xmltags &Arr{
	peaka 	acc
	peakv 	vel
	acc 	acc
	vel 	vel
	psa30 	psa30
	psa10 	psa10
	psa03 	psa03
}

measure &Arr{
	maxdist_deg 	2
	dbwfmeas_pffile dbwfmeas
	chanexpr 	[EH].*
	tstart 		parrival()
	twin 		2 * (sarrival()-parrival())
}

dbprocess_get_stations &Tbl{
	dbopen site
	dbsubset offdate == NULL
	dbjoin affiliation
}

# The following Table of commands is fed to dbprocess(3) to find the wfmeas
# entries that correspond to a given earthquake. Because this procedure
# may vary widely amongst running real-time systems, the code is expressed in the 
# parameter file. Users are cautioned that modifying this command-set requires 
# database expertise. 
dbprocess_get_wfmeas &Tbl{
	dbopen event
	dbsubset evid == $evid
	dbjoin origin
	dbsubset orid == prefor
	dbjoin assoc
	dbjoin arrival
	dbtheta wfmeas sta == wfmeas.sta && chan == wfmeas.chan && wfmeas.time - arrival.time + 10 < 1
	dbsubset filter =~ /.*/
	dbsubset val1 != 0.0
}

# Shown below is an alternate version of dbprocess_get_wfmeas, which is 
# more appropriate if the wfmeas values are derived with the db2shakemap_xml 
# -m option:

# dbprocess_get_wfmeas    &Tbl{
#	 dbopen event
#	dbsubset evid == $evid
#	dbjoin origin
#	dbsubset orid == prefor
#	dbjoin site
#	dbtheta wfmeas sta == wfmeas.sta && abs(wfmeas.time - parrival() + 10) < 1
#	dbsubset val1 != 0.0
# }


