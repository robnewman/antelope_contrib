'\" te
.TH THREE_COMPONENT_SEISMOGRAM 3 "%G"
.SH NAME
ThreeComponentSeismogram - generic data object to hold 3C seismic data
.SH SYNOPSIS
.nf
#include "ThreeComponentSeismogram.h"
using namespace SEISPP;
class ThreeComponentSeismogram : public BasicTimeSeries , public Metadata
{
public:
        bool components_are_orthogonal;
        bool components_are_cardinal;  
        double tmatrix[3][3];
        dmatrix u;
        ThreeComponentSeismogram();
        ThreeComponentSeismogram(int nsamples);
        ThreeComponentSeismogram(Metadata& md,bool load_data);
        ThreeComponentSeismogram(Dbptr db, 
		MetadataList& mdl, AttributeMap& am);
        ThreeComponentSeismogram(const ThreeComponentSeismogram&);
        ThreeComponentSeismogram& operator
                = (const ThreeComponentSeismogram&);
        ~ThreeComponentSeismogram();
        void zero_gaps();
        void rotate_to_standard() throw(SeisppError);
        void rotate(SphericalCoordinate scor);
        void rotate(double nu[3]);
        void apply_transformation_matrix(double a[3][3]);
        void free_surface_transformation(SlownessVector u, double vp0, double vs0);
};
.fi
.SH DESCRIPTION
.LP
A \fIThreeComponentSeismogram\fR is a special type of time series
data.  It is special in two ways:  (1) it is vector data and not 
scalar data and (2) that vector size matches our physical universe
dimension of 3.  Item (1) is encapsulated in this implementation
by making this data object a derived class from a 
\fIBasicTimeSeries\fR object.  Item (2) and the fact that the
customers of this software are nearly guaranteed to be geophysicists
lead to special member functions in this object that might otherwise
be better left as external procedures.  
.LP
A \fIThreeComponentSeismogram\fR is a familiar concept to all
seismologists.  This implementation stores such data in a 
3 by ns (defined in BasicTimeSeries (3)) matrix referenced
with the symbol \fIu\fR to be consistent with the generic
symbol used for vector seismic data in the bible of
seismology by Aki and Richards. 
.LP
A \fIThreeComponentSeismogram\fR inherits three fundamental
parameters from a \fIBasicTimeSeries\fR object definition:  
(1) dt = sample interval, (2) t0 = start time, and (3) ns = number
of samples in this data object.  It also inherits a couple of
auxiliary parameters and data gap processing facilities
described in BasicTimeSeries(3).
It also inherits a Metadata object (see Metadata(3)) used
basically as a variable length header in applications.
See the man page for TimeSeries (3) for more details about 
motivation and use of Metadata for time series data like 
this.
.SH COORDINATE TRANSFORMATION ISSUES
.LP
The key data difference this object adds over a BasicTimeSeries
are concepts related to coordinate transformations.  This 
begins with two booleans added for convenience:  
\fIcomponents_are_orthogonal\fR and 
\fIcomponents_are_cardinal\fR.  The verbose names should make
their meaning clear with the statement that "cardinal" means
the components are in standard geographical coordinates
(+x1=east, +x2=north, and +x3=up).
The user should recognize that the implicit assumption is
that all transformation matrices are relative to the 
fixed reference frame of earth geographical coordinates.
This has the well known failing for the existing GSN station
at the South pole but handling that one special case 
was not something I chose to address.
.LP
The \fItmatrix\fR stores the current transformation matrix
of the data relative to the cardinal coordinate. 
Hence, if components_are_cardinal is true you should find
that tmatrix is an identity.  
.LP
Several member functions are provided
to deal with transformation matrix issues.
The \fIrotate_to_standard\fR standard function will
return the data to cardinal coordinates using the current
tmatrix.  (Note if in doubt, call this function.  
If components_are_cardinal is set true the function will
return immediately and do nothing to the data.)  
.LP
The \fIrotate\fR function will apply a special earth specific
transformation to a form of ray coordinate.  It comes in two
versions specified by a unit vector (double nu[3]) version)
or angular definition (SphericalCoordinate version).  Both 
are used to define a coordinate transformation in which:
(a)  the x3 direction is transformed to be parallel to the
direction defined by the unit vector nu (SphericalCoordinate
angles defined in scor); x2 (original north) is rotated 
to be radial from the direction defined by nu (defined
by the direction of the projection of nu onto a horizontal
plane); and x1 (original east) is transformed to 
a transverse component relative to nu (defined as 
a horizontal vector perpendicular to 
the transformed x2=radial and x3=longitudinal). 
Note that this yields data in an orthogonal reference frame.
.LP
The \fIfree_surface_transformation\fR function is similar
in some ways to the \fIrotate\fR function but it 
transforms the data to a coordinate system that is not
orthogonal.  I compute the free surface transformation
matrix defined by Kennett (1991, GJI,vol. 104, p. 153-163).
The result is a ray coordinate transformation with 
x1=transverse, x2=radial, and x3=longitudinal.  This 
transformation is defined by the slowness (ray parameter)
in s/km of a plane wave and the surface P (vp0) and
S (vs0) velocities (both in units of km/s).  
Be aware also that not only is this transformation not
orthogonal, it also changes the relative amplitudes of the
P and S components.   That is, it does not preserve 
original vector amplitudes.   
This function will throw a SeisppError object if the surface
velocities passed to the function are higher than the apparent
velocity (1/ray_parameter)  as the transformation matrix used
will not work for post-critical wavefields.
.LP
The \fIapply_transformation_matrix\fR functions more generically.
It simply applies the 3x3 transformation matrix to the data.
.LP
Note that all coordinate transformations are accumulative.
That is, multiple calls to any of the transformation routines
will be accumulated in tmatrix. The notable exception is
rotate_to_standard which will always return the data to 
the standard, cardinal coordinate system.  
.SH CONSTRUCTORS
.IP (1)
\fIThreeComponentSeismogram();\fR This, the default constructor, does 
almost nothing.  It initializes all member data parameters to
zero, initializes the transformation matrix properties to a default that should be 
considered undefined, calls the default constructor for u, and marks the data dead.
.IP (2)
\fIThreeComponentSeismogram(int nsin);\fR This acts like the default constructor
except it sets up a 3xnsin u matrix.
.IP (3)
\fIThreeComponentSeismogram(TimeSeries&);\fR Standard copy constructor.
.IP (4)
\fIThreeComponentSeismogram(Metadata& md,bool load_data);\fR  This should be 
viewed as a general constructor driven by a Metadata object.  
It provides a fairly general mechanism for file-based input
of time series data, but it has a frozen name space for a set
of parameters it needs to extract from the parent Metadata object.
This constructor first clones the Metadata contents 
(using the Metadata copy constructor) of the 
object md that it is passed.  
It then extracts some basic parameters from the input 
Metadata object using this map of external names to 
internal symbols:
.nf

\fISymbol		Metadata name\fR
\fI====Common with parallel TimeSeries constructor======\fR
dt			samprate
t0			starttime
ns			nsamp
\fI====Special for ThreeComponentSeismogram======\fR
components_are_cardinal	components_are_cardinal
tmatrix[0]0]		U11
tmatrix[1]0]		U21
tmatrix[2]0]		U31
tmatrix[0]1]		U12
tmatrix[1]1]		U22
tmatrix[2]1]		U32
tmatrix[0]2]		U13
tmatrix[1]2]		U23
tmatrix[2]2]		U33
.fi
.IP
The transformation matrix parameters (U11, U21, etc.) are
ONLY referenced when the components_are_cardinal boolean 
is false.  When the transformation matrix is set by this
mechanism the components_are_orthogonal boolean is always
set false to avoid requiring the need to store this 
attribute in an external representation.  The only cost
is that a small matrix inversion is required to convert 
the data to standard coordinates instead of a simple 
transpose for orthogonal coordinates.  
For all these reasons it should be obvious that in 
general the best external representation of data 
passed through this library is to always put the 
data back into cardinal coordinate before pushing
it to external storage.
.IP
The \fIload_data\fR boolean field
on this constructor determines
whether or not the constructor should attempt to read data into 
the u matrix.  This switch was a design feature to allow flexibility
in input.  The concept is that simple input 
(defined as raw binary data in host float format)
is handled by allowing
this constructor to directly and blindly read such data.  
Other formats are assumed to require more work with a specialized function.
In those cases the expectation is that the user would
call this constructor with load_data false, read the input data into a buffer,
and convert and store the results in the u matrix.
This model is applicable to any format I know of so I viewed this generic
approach preferable to adding a long string of constructors for the 
plethora of formats that exist for three-component seismic data.  When load_data is 
true a second set of parameters is extracted from the Metadata object, md.
These must be present or the constructor will fail.  The required symbols
are:
.nf
.in 2c

\fIKeyword			Definition\fR
TimeReferenceType		tref field of BasicTimeSeries
datatype			Data type ala CSS3.0 dtype attribute
foff				File offset in bytes to first sample
dir				Directory where data will be found
dfile				File name to read
three_component_data_order	Matrix order switch
.fi
.IP
Note that tref is assumed to be defined by a string field.
If TimeReferenceType=="relative" relative times are
assumed, otherwise the time standard is assumed to be
absolute (epoch) times.  
The "datatype", "dir", and "dfile" fields define the format
and path description for the file that contains the 
data of interest.
Note that this simple mechanism does not currently support
any data gap definitions.
The current implementation is limited in capabilities due
to the design concept for this constructor described above.
Specifically, if datatype is anything but the host float format
the constructor will throw a SeisppError (3) exception.  
This function also requires the data for a three-component
station be contiguous.  Either matrix order is allowed, 
but the most rational to allow ease of working with other
elements of packages like Antelope is to use channel order
for the external representation (i.e. data for the x1 direction are the
first ns samples, data for x2 are the next ns samples, and
data for x3 direction are the last ns samples).  The Metadata
keyword "three_component_data_order" is used by this 
constructor to know what the external data order is. 
When three_component_data_order == "channel_order" OR
"multiplexed" the constructor assumes the data are 
in the transposed order to that described above
(i.e. x1(0),x2(0),x3(0),x1(dt),x2(dt),x3(dt), etc.)
If this parameter is anything else seismogram order is 
assumed.
If all the required Metadata parameters are extracted
correctly with no inconsistencies the constructor
will attempt to open the file dir/dfile, 
seek to foff, read 3*ns float samples
from the file with fread, and close the file.
If any of the I/O operations fail the constructor will
throw a SeisppError exception.
Note that if this constructor throws any exception
the contents of the object should be viewed as garbage.
This is standard behaviour but worth emphasizing.
.IP (5)
\fIThreeComponentSeismogram(Dbptr db,MetadataList& mdl,AttributeMap& am);\fR  
This is a generic database-driven constructor for segmented 
data.  That is, it makes an implicit assumption the data being
requested are defined in single, discrete segments indexed
by a database (e.g. event-based seismograms)
AND that the rows of the database have been sorted and grouped
into three-component bundles.    The current 
implementation uses an Antelope database pointer as Dbptr but
the user should recognize that this is not a requirement of 
the interface.  Dbptr should be viewed as a database handle
that points at one row of a database that defines TimeSeries
data.  What that handle points to is implementation dependent.
For this implementation it is an Antelope database pointer
and it MUST point to one and only one row of a database view
that defines a bundle created by dbgroup by time:sta:chan.
The database attributes to be extracted from this database row 
are controlled by mdl and am in the manner described in
detail in Metadata(3).  Briefly, mdl and am control how attributes
in the database are mapped to an internal Metadata namespace.  
The list of attributes to extracted from the database are driven by 
mdl.  The basic algorithm is that for each element of mdl an
associated attribute is extracted from the unique database 
row defined by db.  
A special problem is presented by the transformation matrix.
The database view must contain attributes from the CSS3.0
sitechan table with the attributes "hang" and "vang" 
mapped to the same internal names.  The are used to 
construct the transformation matrix with special checks 
for the special case that defines components_are_cardinal.
This implementation then uses the 
Antelope trace library to read the data and define any 
data gaps.  This means any trace format Antelope supports can
be read and loaded with this constructor.  It also means
that the mechanisms used by trgaps(3) to define gaps in
external data representations
will also work and the 
ThreeComponentSeismogram object that is constructed will have 
such data gaps correctly defined.  
Note that this function also handles irregular start and end times
within reason.  It finds the maximum and minimum start and end times
for the three input channels.  
If the max and min are not equal the portion between 
the max and min are marked as a gap.  This was intentionally 
done instead of resetting t0 and/or ns with a view that this
was less mysterious.  That is, this is in fact a gap issue.
It is also NOT treated as an exception as this should be viewed
as a data problem that we need to plan to work around.
.IP
This constructor will throw a SeisppError if there are any 
problems.  An error handler should catch this exception, call 
log_error(), and discard such data or abort.
.SH NON-MEMBER FUNCTIONS
.LP
There are two different \fIdbsave\fR functions that save a
ThreeComponentSeismogram object's contents to a Datascope
Database.  The prototypes are:
.nf
void dbsave(ThreeComponentSeismogram& ts,Dbptr db,string table,
        MetadataList& md, AttributeMap& am);
void dbsave(ThreeComponentSeismogram& ts,Dbptr db,
        string table, MetadataList& md,
        AttributeMap& am, vector<string>chanmap,bool output_as_standard);
.fi
The best way to understand these functions is that the first is
a simplified, overloaded version of the second (more general)
function.  The basic algorithm is that the three-component 
matrix is fragmented into three TimeSeries objects and the 
TimeSeries version of dbsave is called on each of the 
resulting three TimeSeries objects.  The ts, db, table, md, and
am arguments are exactly as described in the documentation
for TimeSeries(3).  The quick version is that the results 
are written to the Datascope database db in table "table" 
using the set of names in md with internal to external namespace
mapping defined in am.  
This function has two frozen properties.  First, the 
output channels are ALWAYS called:  E, N, and Z.  Second, to
be consistent with this naming convention rotate_to_standard is
always called before output.
.LP
The second version of this functions adds more generality.  
The primary distinction is the chanmap vector.  
The chanmap variable is assumed to be a three-component, STL vector
of strings that define the names that should be assigned to 
the three components of the output TimeSeries.  They 
are assumed to be in data order so that chanmap[0], for example,
corresponds to row 0 of the 3xns data matrix used for the
ThreeComponentSeismogram object. 
When the boolean variable \fIoutput_as_standard\fR 
is true the data are rotated to standard coordinate 
(rotate_to_standard is called) before sending the result to
output.  
.LP
Both of these functions throw SeisppError objects if there
are problems on output.
.SH LIBRARY
-lseispp
.SH "SEE ALSO"
.nf
Metadata(3), BasicTimeSeries(3), TimeSeries(3),
http://geology.indiana.edu/pavlis/software/seispp/html/index.html
.fi
.SH "BUGS AND CAVEATS"
.LP
The mix of an object-oriented matrix implementation and the fixed C array tmatrix
for the transformation matrix is a small potential confusion. I did this
because a transformation matrix has a fixed dimension and so a fixed
size C array works cleanly.
.LP
If you use the transformation matrix make sure you realize that this
is the transformation used to transform the data from standard 
coordinates to the current state.  When \fIcomponents_are_orthogonal\fR
is true the inverse transform is the transpose of tmatrix.  Otherwise
a matrix inversion is necessary, which is what \fIrotate_to_standard\fR
does in that situation.
.SH AUTHOR
Gary L. Pavlis
Indiana University
pavlis@indiana.edu
.\" $Id$
